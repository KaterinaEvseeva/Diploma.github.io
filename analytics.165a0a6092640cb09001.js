!function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=118)}([function(t,n,r){"use strict";r.d(n,"b",(function(){return e})),r.d(n,"i",(function(){return o})),r.d(n,"e",(function(){return i})),r.d(n,"g",(function(){return u})),r.d(n,"h",(function(){return c})),r.d(n,"d",(function(){return a})),r.d(n,"f",(function(){return f})),r.d(n,"c",(function(){return s}));var e=["Января","Февраля","Марта","Апреля","Мая","Июня","Июля","АВгуста","Сентября","Октября","Ноября","Декабря"],o=["пн","вт","ср","чт","пт","сб","вс"],i=document.querySelector(".search-resault__grid"),u=document.querySelector(".search-resault__progress"),c=document.querySelector(".search-resault__show-more"),a=document.querySelector(".search-resault__fail"),f=document.querySelector(".search-resault__header"),s=document.querySelector(".search-resault__desc");n.a={ONE_WEEK:6048e5,ONE_DAY:864e5,NEWSAPI_KEY:"422aacd7b9af4b66bca82e0f23418cf8",NEWSAPI_URL:"https://praktikum.tk/news/v2/everything",CARDS_PER_STRING:3,GITHUB_API_URL:"https://api.github.com/repos/KaterinaEvseeva/Diploma.github.io/commits?sha=level-1"}},function(t,n,r){(function(n){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n&&n)||Function("return this")()}).call(this,r(64))},function(t,n,r){var e=r(1),o=r(29),i=r(4),u=r(30),c=r(31),a=r(52),f=o("wks"),s=e.Symbol,l=a?s:s&&s.withoutSetter||u;t.exports=function(t){return i(f,t)||(c&&i(s,t)?f[t]=s[t]:f[t]=l("Symbol."+t)),f[t]}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(3);t.exports=!e((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,n,r){var e=r(6),o=r(43),i=r(8),u=r(19),c=Object.defineProperty;n.f=e?c:function(t,n,r){if(i(t),n=u(n,!0),i(r),o)try{return c(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){var e=r(5);t.exports=function(t){if(!e(t))throw TypeError(String(t)+" is not an object");return t}},function(t,n,r){var e=r(1),o=r(23).f,i=r(11),u=r(14),c=r(27),a=r(53),f=r(46);t.exports=function(t,n){var r,s,l,p,v,y=t.target,g=t.global,d=t.stat;if(r=g?e:d?e[y]||c(y,{}):(e[y]||{}).prototype)for(s in n){if(p=n[s],l=t.noTargetGet?(v=o(r,s))&&v.value:r[s],!f(g?s:y+(d?".":"#")+s,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;a(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),u(r,s,p,t)}}},function(t,n,r){var e=r(34),o=r(24);t.exports=function(t){return e(o(t))}},function(t,n,r){var e=r(6),o=r(7),i=r(16);t.exports=e?function(t,n,r){return o.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){var e=r(54),o=r(1),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,n){return arguments.length<2?i(e[t])||i(o[t]):e[t]&&e[t][n]||o[t]&&o[t][n]}},function(t,n,r){var e=r(1),o=r(11),i=r(4),u=r(27),c=r(32),a=r(20),f=a.get,s=a.enforce,l=String(String).split("String");(t.exports=function(t,n,r,c){var a=!!c&&!!c.unsafe,f=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof r&&("string"!=typeof n||i(r,"name")||o(r,"name",n),s(r).source=l.join("string"==typeof n?n:"")),t!==e?(a?!p&&t[n]&&(f=!0):delete t[n],f?t[n]=r:o(t,n,r)):f?t[n]=r:u(n,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||c(this)}))},function(t,n,r){var e=r(36),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,n){t.exports=!1},function(t,n,r){var e=r(5);t.exports=function(t,n){if(!e(t))return t;var r,o;if(n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!e(o=r.call(t)))return o;if(!n&&"function"==typeof(r=t.toString)&&!e(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n,r){var e,o,i,u=r(65),c=r(1),a=r(5),f=r(11),s=r(4),l=r(33),p=r(22),v=c.WeakMap;if(u){var y=new v,g=y.get,d=y.has,h=y.set;e=function(t,n){return h.call(y,t,n),n},o=function(t){return g.call(y,t)||{}},i=function(t){return d.call(y,t)}}else{var m=l("state");p[m]=!0,e=function(t,n){return f(t,m,n),n},o=function(t){return s(t,m)?t[m]:{}},i=function(t){return s(t,m)}}t.exports={set:e,get:o,has:i,enforce:function(t){return i(t)?o(t):e(t,{})},getterFor:function(t){return function(n){var r;if(!a(n)||(r=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return r}}}},function(t,n,r){var e=r(24);t.exports=function(t){return Object(e(t))}},function(t,n){t.exports={}},function(t,n,r){var e=r(6),o=r(45),i=r(16),u=r(10),c=r(19),a=r(4),f=r(43),s=Object.getOwnPropertyDescriptor;n.f=e?s:function(t,n){if(t=u(t),n=c(n,!0),f)try{return s(t,n)}catch(t){}if(a(t,n))return i(!o.f.call(t,n),t[n])}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,n,r){var e=r(12);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n,r){var e={};e[r(2)("toStringTag")]="z",t.exports="[object z]"===String(e)},function(t,n,r){var e=r(1),o=r(11);t.exports=function(t,n){try{o(e,t,n)}catch(r){e[t]=n}return n}},function(t,n){t.exports={}},function(t,n,r){var e=r(18),o=r(42);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.6.5",mode:e?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+e).toString(36)}},function(t,n,r){var e=r(3);t.exports=!!Object.getOwnPropertySymbols&&!e((function(){return!String(Symbol())}))},function(t,n,r){var e=r(42),o=Function.toString;"function"!=typeof e.inspectSource&&(e.inspectSource=function(t){return o.call(t)}),t.exports=e.inspectSource},function(t,n,r){var e=r(29),o=r(30),i=e("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,n,r){var e=r(3),o=r(12),i="".split;t.exports=e((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,n,r){var e=r(55),o=r(41).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,o)}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(17);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 0:return function(){return t.call(n)};case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n,r){var e,o,i=r(1),u=r(48),c=i.process,a=c&&c.versions,f=a&&a.v8;f?o=(e=f.split("."))[0]+e[1]:u&&(!(e=u.match(/Edge\/(\d+)/))||e[1]>=74)&&(e=u.match(/Chrome\/(\d+)/))&&(o=e[1]),t.exports=o&&+o},function(t,n,r){var e=r(3),o=r(2),i=r(38),u=o("species");t.exports=function(t){return i>=51||!e((function(){var n=[];return(n.constructor={})[u]=function(){return{foo:1}},1!==n[t](Boolean).foo}))}},function(t,n,r){var e=r(1),o=r(5),i=e.document,u=o(i)&&o(i.createElement);t.exports=function(t){return u?i.createElement(t):{}}},function(t,n){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,n,r){var e=r(1),o=r(27),i=e["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,n,r){var e=r(6),o=r(3),i=r(40);t.exports=!e&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,n,r){var e=r(26),o=r(12),i=r(2)("toStringTag"),u="Arguments"==o(function(){return arguments}());t.exports=e?o:function(t){var n,r,e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?r:u?o(n):"Object"==(e=o(n))&&"function"==typeof n.callee?"Arguments":e}},function(t,n,r){"use strict";var e={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!e.call({1:2},1);n.f=i?function(t){var n=o(this,t);return!!n&&n.enumerable}:e},function(t,n,r){var e=r(3),o=/#|\.prototype\./,i=function(t,n){var r=c[u(t)];return r==f||r!=a&&("function"==typeof n?e(n):!!n)},u=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},a=i.NATIVE="N",f=i.POLYFILL="P";t.exports=i},function(t,n,r){var e=r(7).f,o=r(4),i=r(2)("toStringTag");t.exports=function(t,n,r){t&&!o(t=r?t:t.prototype,i)&&e(t,i,{configurable:!0,value:n})}},function(t,n,r){var e=r(13);t.exports=e("navigator","userAgent")||""},function(t,n,r){var e=r(5),o=r(25),i=r(2)("species");t.exports=function(t,n){var r;return o(t)&&("function"!=typeof(r=t.constructor)||r!==Array&&!o(r.prototype)?e(r)&&null===(r=r[i])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===n?0:n)}},function(t,n,r){"use strict";var e=r(9),o=r(3),i=r(25),u=r(5),c=r(21),a=r(15),f=r(51),s=r(49),l=r(39),p=r(2),v=r(38),y=p("isConcatSpreadable"),g=v>=51||!o((function(){var t=[];return t[y]=!1,t.concat()[0]!==t})),d=l("concat"),h=function(t){if(!u(t))return!1;var n=t[y];return void 0!==n?!!n:i(t)};e({target:"Array",proto:!0,forced:!g||!d},{concat:function(t){var n,r,e,o,i,u=c(this),l=s(u,0),p=0;for(n=-1,e=arguments.length;n<e;n++)if(i=-1===n?u:arguments[n],h(i)){if(p+(o=a(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(r=0;r<o;r++,p++)r in i&&f(l,p,i[r])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");f(l,p++,i)}return l.length=p,l}})},function(t,n,r){"use strict";var e=r(19),o=r(7),i=r(16);t.exports=function(t,n,r){var u=e(n);u in t?o.f(t,u,i(0,r)):t[u]=r}},function(t,n,r){var e=r(31);t.exports=e&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,n,r){var e=r(4),o=r(67),i=r(23),u=r(7);t.exports=function(t,n){for(var r=o(n),c=u.f,a=i.f,f=0;f<r.length;f++){var s=r[f];e(t,s)||c(t,s,a(n,s))}}},function(t,n,r){var e=r(1);t.exports=e},function(t,n,r){var e=r(4),o=r(10),i=r(68).indexOf,u=r(22);t.exports=function(t,n){var r,c=o(t),a=0,f=[];for(r in c)!e(u,r)&&e(c,r)&&f.push(r);for(;n.length>a;)e(c,r=n[a++])&&(~i(f,r)||f.push(r));return f}},function(t,n,r){var e=r(36),o=Math.max,i=Math.min;t.exports=function(t,n){var r=e(t);return r<0?o(r+n,0):i(r,n)}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,r){var e=r(37),o=r(34),i=r(21),u=r(15),c=r(49),a=[].push,f=function(t){var n=1==t,r=2==t,f=3==t,s=4==t,l=6==t,p=5==t||l;return function(v,y,g,d){for(var h,m,x=i(v),b=o(x),S=e(y,g,3),w=u(b.length),O=0,_=d||c,A=n?_(v,w):r?_(v,0):void 0;w>O;O++)if((p||O in b)&&(m=S(h=b[O],O,x),t))if(n)A[O]=m;else if(m)switch(t){case 3:return!0;case 5:return h;case 6:return O;case 2:a.call(A,h)}else if(s)return!1;return l?-1:f||s?s:A}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6)}},function(t,n,r){var e=r(6),o=r(3),i=r(4),u=Object.defineProperty,c={},a=function(t){throw t};t.exports=function(t,n){if(i(c,t))return c[t];n||(n={});var r=[][t],f=!!i(n,"ACCESSORS")&&n.ACCESSORS,s=i(n,0)?n[0]:a,l=i(n,1)?n[1]:void 0;return c[t]=!!r&&!o((function(){if(f&&!e)return!0;var t={length:-1};f?u(t,1,{enumerable:!0,get:a}):t[1]=1,r.call(t,s,l)}))}},function(t,n,r){var e=r(26),o=r(14),i=r(66);e||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,n,r){var e=r(8),o=r(17),i=r(2)("species");t.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||null==(r=e(u)[i])?n:o(r)}},function(t,n,r){var e=r(13);t.exports=e("document","documentElement")},function(t,n,r){var e=r(55),o=r(41);t.exports=Object.keys||function(t){return e(t,o)}},function(t,n){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n,r){var e=r(1),o=r(32),i=e.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,n,r){"use strict";var e=r(26),o=r(44);t.exports=e?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,n,r){var e=r(13),o=r(35),i=r(57),u=r(8);t.exports=e("Reflect","ownKeys")||function(t){var n=o.f(u(t)),r=i.f;return r?n.concat(r(t)):n}},function(t,n,r){var e=r(10),o=r(15),i=r(56),u=function(t){return function(n,r,u){var c,a=e(n),f=o(a.length),s=i(u,f);if(t&&r!=r){for(;f>s;)if((c=a[s++])!=c)return!0}else for(;f>s;s++)if((t||s in a)&&a[s]===r)return t||s||0;return!t&&-1}};t.exports={includes:u(!0),indexOf:u(!1)}},function(t,n,r){"use strict";var e=r(13),o=r(7),i=r(2),u=r(6),c=i("species");t.exports=function(t){var n=e(t),r=o.f;u&&n&&!n[c]&&r(n,c,{configurable:!0,get:function(){return this}})}},function(t,n,r){var e=r(2),o=r(28),i=e("iterator"),u=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||u[i]===t)}},function(t,n,r){var e=r(44),o=r(28),i=r(2)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[e(t)]}},function(t,n,r){var e=r(8);t.exports=function(t,n,r,o){try{return o?n(e(r)[0],r[1]):n(r)}catch(n){var i=t.return;throw void 0!==i&&e(i.call(t)),n}}},function(t,n,r){var e=r(2)("iterator"),o=!1;try{var i=0,u={next:function(){return{done:!!i++}},return:function(){o=!0}};u[e]=function(){return this},Array.from(u,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var r=!1;try{var i={};i[e]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},,,,function(t,n,r){},function(t,n,r){var e,o=r(8),i=r(96),u=r(41),c=r(22),a=r(62),f=r(40),s=r(33),l=s("IE_PROTO"),p=function(){},v=function(t){return"<script>"+t+"<\/script>"},y=function(){try{e=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,n;y=e?function(t){t.write(v("")),t.close();var n=t.parentWindow.Object;return t=null,n}(e):((n=f("iframe")).style.display="none",a.appendChild(n),n.src=String("javascript:"),(t=n.contentWindow.document).open(),t.write(v("document.F=Object")),t.close(),t.F);for(var r=u.length;r--;)delete y.prototype[u[r]];return y()};c[l]=!0,t.exports=Object.create||function(t,n){var r;return null!==t?(p.prototype=o(t),r=new p,p.prototype=null,r[l]=t):r=y(),void 0===n?r:i(r,n)}},function(t,n,r){var e=r(2);n.f=e},function(t,n,r){var e=r(6),o=r(7).f,i=Function.prototype,u=i.toString,c=/^\s*function ([^ (]*)/;e&&!("name"in i)&&o(i,"name",{configurable:!0,get:function(){try{return u.call(this).match(c)[1]}catch(t){return""}}})},function(t,n,r){"use strict";var e=r(3);t.exports=function(t,n){var r=[][t];return!!r&&e((function(){r.call(null,n||function(){throw 1},1)}))}},function(t,n,r){"use strict";var e=r(9),o=r(58).map,i=r(39),u=r(59),c=i("map"),a=u("map");e({target:"Array",proto:!0,forced:!c||!a},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},,,,,function(t,n,r){var e=r(54),o=r(4),i=r(79),u=r(7).f;t.exports=function(t){var n=e.Symbol||(e.Symbol={});o(n,t)||u(n,t,{value:i.f(t)})}},function(t,n,r){"use strict";var e=r(8);t.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.dotAll&&(n+="s"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},,,,,,,function(t,n,r){"use strict";var e=r(9),o=r(1),i=r(13),u=r(18),c=r(6),a=r(31),f=r(52),s=r(3),l=r(4),p=r(25),v=r(5),y=r(8),g=r(21),d=r(10),h=r(19),m=r(16),x=r(78),b=r(63),S=r(35),w=r(97),O=r(57),_=r(23),A=r(7),E=r(45),j=r(11),T=r(14),I=r(29),P=r(33),R=r(22),M=r(30),k=r(2),L=r(79),C=r(87),D=r(47),N=r(20),F=r(58).forEach,q=P("hidden"),G=k("toPrimitive"),U=N.set,W=N.getterFor("Symbol"),Y=Object.prototype,V=o.Symbol,B=i("JSON","stringify"),K=_.f,z=A.f,H=w.f,$=E.f,J=I("symbols"),Q=I("op-symbols"),X=I("string-to-symbol-registry"),Z=I("symbol-to-string-registry"),tt=I("wks"),nt=o.QObject,rt=!nt||!nt.prototype||!nt.prototype.findChild,et=c&&s((function(){return 7!=x(z({},"a",{get:function(){return z(this,"a",{value:7}).a}})).a}))?function(t,n,r){var e=K(Y,n);e&&delete Y[n],z(t,n,r),e&&t!==Y&&z(Y,n,e)}:z,ot=function(t,n){var r=J[t]=x(V.prototype);return U(r,{type:"Symbol",tag:t,description:n}),c||(r.description=n),r},it=f?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof V},ut=function(t,n,r){t===Y&&ut(Q,n,r),y(t);var e=h(n,!0);return y(r),l(J,e)?(r.enumerable?(l(t,q)&&t[q][e]&&(t[q][e]=!1),r=x(r,{enumerable:m(0,!1)})):(l(t,q)||z(t,q,m(1,{})),t[q][e]=!0),et(t,e,r)):z(t,e,r)},ct=function(t,n){y(t);var r=d(n),e=b(r).concat(lt(r));return F(e,(function(n){c&&!at.call(r,n)||ut(t,n,r[n])})),t},at=function(t){var n=h(t,!0),r=$.call(this,n);return!(this===Y&&l(J,n)&&!l(Q,n))&&(!(r||!l(this,n)||!l(J,n)||l(this,q)&&this[q][n])||r)},ft=function(t,n){var r=d(t),e=h(n,!0);if(r!==Y||!l(J,e)||l(Q,e)){var o=K(r,e);return!o||!l(J,e)||l(r,q)&&r[q][e]||(o.enumerable=!0),o}},st=function(t){var n=H(d(t)),r=[];return F(n,(function(t){l(J,t)||l(R,t)||r.push(t)})),r},lt=function(t){var n=t===Y,r=H(n?Q:d(t)),e=[];return F(r,(function(t){!l(J,t)||n&&!l(Y,t)||e.push(J[t])})),e};(a||(T((V=function(){if(this instanceof V)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,n=M(t),r=function(t){this===Y&&r.call(Q,t),l(this,q)&&l(this[q],n)&&(this[q][n]=!1),et(this,n,m(1,t))};return c&&rt&&et(Y,n,{configurable:!0,set:r}),ot(n,t)}).prototype,"toString",(function(){return W(this).tag})),T(V,"withoutSetter",(function(t){return ot(M(t),t)})),E.f=at,A.f=ut,_.f=ft,S.f=w.f=st,O.f=lt,L.f=function(t){return ot(k(t),t)},c&&(z(V.prototype,"description",{configurable:!0,get:function(){return W(this).description}}),u||T(Y,"propertyIsEnumerable",at,{unsafe:!0}))),e({global:!0,wrap:!0,forced:!a,sham:!a},{Symbol:V}),F(b(tt),(function(t){C(t)})),e({target:"Symbol",stat:!0,forced:!a},{for:function(t){var n=String(t);if(l(X,n))return X[n];var r=V(n);return X[n]=r,Z[r]=n,r},keyFor:function(t){if(!it(t))throw TypeError(t+" is not a symbol");if(l(Z,t))return Z[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),e({target:"Object",stat:!0,forced:!a,sham:!c},{create:function(t,n){return void 0===n?x(t):ct(x(t),n)},defineProperty:ut,defineProperties:ct,getOwnPropertyDescriptor:ft}),e({target:"Object",stat:!0,forced:!a},{getOwnPropertyNames:st,getOwnPropertySymbols:lt}),e({target:"Object",stat:!0,forced:s((function(){O.f(1)}))},{getOwnPropertySymbols:function(t){return O.f(g(t))}}),B)&&e({target:"JSON",stat:!0,forced:!a||s((function(){var t=V();return"[null]"!=B([t])||"{}"!=B({a:t})||"{}"!=B(Object(t))}))},{stringify:function(t,n,r){for(var e,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(e=n,(v(n)||void 0!==t)&&!it(t))return p(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!it(n))return n}),o[1]=n,B.apply(null,o)}});V.prototype[G]||j(V.prototype,G,V.prototype.valueOf),D(V,"Symbol"),R[q]=!0},function(t,n,r){var e=r(6),o=r(7),i=r(8),u=r(63);t.exports=e?Object.defineProperties:function(t,n){i(t);for(var r,e=u(n),c=e.length,a=0;c>a;)o.f(t,r=e[a++],n[r]);return t}},function(t,n,r){var e=r(10),o=r(35).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(e(t))}},function(t,n,r){"use strict";var e=r(9),o=r(6),i=r(1),u=r(4),c=r(5),a=r(7).f,f=r(53),s=i.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var l={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),n=this instanceof p?new s(t):void 0===t?s():s(t);return""===t&&(l[n]=!0),n};f(p,s);var v=p.prototype=s.prototype;v.constructor=p;var y=v.toString,g="Symbol(test)"==String(s("test")),d=/^Symbol\((.*)\)[^)]+$/;a(v,"description",{configurable:!0,get:function(){var t=c(this)?this.valueOf():this,n=y.call(t);if(u(l,t))return"";var r=g?n.slice(7,-1):n.replace(d,"$1");return""===r?void 0:r}}),e({global:!0,forced:!0},{Symbol:p})}},,function(t,n,r){"use strict";var e=r(9),o=r(5),i=r(25),u=r(56),c=r(15),a=r(10),f=r(51),s=r(2),l=r(39),p=r(59),v=l("slice"),y=p("slice",{ACCESSORS:!0,0:0,1:2}),g=s("species"),d=[].slice,h=Math.max;e({target:"Array",proto:!0,forced:!v||!y},{slice:function(t,n){var r,e,s,l=a(this),p=c(l.length),v=u(t,p),y=u(void 0===n?p:n,p);if(i(l)&&("function"!=typeof(r=l.constructor)||r!==Array&&!i(r.prototype)?o(r)&&null===(r=r[g])&&(r=void 0):r=void 0,r===Array||void 0===r))return d.call(l,v,y);for(e=new(void 0===r?Array:r)(h(y-v,0)),s=0;v<y;v++,s++)v in l&&f(e,s,l[v]);return e.length=s,e}})},function(t,n,r){"use strict";var e=r(10),o=r(122),i=r(28),u=r(20),c=r(102),a=u.set,f=u.getterFor("Array Iterator");t.exports=c(Array,"Array",(function(t,n){a(this,{type:"Array Iterator",target:e(t),index:0,kind:n})}),(function(){var t=f(this),n=t.target,r=t.kind,e=t.index++;return!n||e>=n.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:e,done:!1}:"values"==r?{value:n[e],done:!1}:{value:[e,n[e]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,n,r){"use strict";var e=r(9),o=r(103),i=r(105),u=r(106),c=r(47),a=r(11),f=r(14),s=r(2),l=r(18),p=r(28),v=r(104),y=v.IteratorPrototype,g=v.BUGGY_SAFARI_ITERATORS,d=s("iterator"),h=function(){return this};t.exports=function(t,n,r,s,v,m,x){o(r,n,s);var b,S,w,O=function(t){if(t===v&&T)return T;if(!g&&t in E)return E[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},_=n+" Iterator",A=!1,E=t.prototype,j=E[d]||E["@@iterator"]||v&&E[v],T=!g&&j||O(v),I="Array"==n&&E.entries||j;if(I&&(b=i(I.call(new t)),y!==Object.prototype&&b.next&&(l||i(b)===y||(u?u(b,y):"function"!=typeof b[d]&&a(b,d,h)),c(b,_,!0,!0),l&&(p[_]=h))),"values"==v&&j&&"values"!==j.name&&(A=!0,T=function(){return j.call(this)}),l&&!x||E[d]===T||a(E,d,T),p[n]=T,v)if(S={values:O("values"),keys:m?T:O("keys"),entries:O("entries")},x)for(w in S)(g||A||!(w in E))&&f(E,w,S[w]);else e({target:n,proto:!0,forced:g||A},S);return S}},function(t,n,r){"use strict";var e=r(104).IteratorPrototype,o=r(78),i=r(16),u=r(47),c=r(28),a=function(){return this};t.exports=function(t,n,r){var f=n+" Iterator";return t.prototype=o(e,{next:i(1,r)}),u(t,f,!1,!0),c[f]=a,t}},function(t,n,r){"use strict";var e,o,i,u=r(105),c=r(11),a=r(4),f=r(2),s=r(18),l=f("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(e=o):p=!0),null==e&&(e={}),s||a(e,l)||c(e,l,(function(){return this})),t.exports={IteratorPrototype:e,BUGGY_SAFARI_ITERATORS:p}},function(t,n,r){var e=r(4),o=r(21),i=r(33),u=r(123),c=i("IE_PROTO"),a=Object.prototype;t.exports=u?Object.getPrototypeOf:function(t){return t=o(t),e(t,c)?t[c]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n,r){var e=r(8),o=r(124);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,r={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),n=r instanceof Array}catch(t){}return function(r,i){return e(r),o(i),n?t.call(r,i):r.__proto__=i,r}}():void 0)},function(t,n,r){var e=r(5),o=r(12),i=r(2)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,r){"use strict";var e=r(3);function o(t,n){return RegExp(t,n)}n.UNSUPPORTED_Y=e((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),n.BROKEN_CARET=e((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,n,r){var e=r(36),o=r(24),i=function(t){return function(n,r){var i,u,c=String(o(n)),a=e(r),f=c.length;return a<0||a>=f?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===f||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},,,,,,,,,function(t,n,r){"use strict";r.r(n);r(95),r(98),r(119),r(50),r(120),r(101),r(82),r(100),r(125),r(80),r(60),r(126),r(128),r(130),r(132),r(133),r(134),r(136),r(77),r(138);var e=r(0);function o(t){return function(t){if(Array.isArray(t))return u(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||i(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,n){if(t){if("string"==typeof t)return u(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?u(t,n):void 0}}function u(t,n){(null==n||n>t.length)&&(n=t.length);for(var r=0,e=new Array(n);r<n;r++)e[r]=t[r];return e}var c=JSON.parse(localStorage.getItem("search-resault"));console.log(c),c&&c.searchData?function(){console.log(c),document.querySelector(".analytics__title_request").innerText=c.searchData,document.querySelector(".analytics__num").innerText=c.articles.length||0;var t=function(t,n){console.log(t,n);for(var r=0,u={},c=new Date,a=0;a<8;++a)u["".concat(c.getFullYear(),"-").concat(c.getMonth(),"-").concat(c.getDate())]={dayWeek:e.i[c.getDay()],date:c.getDate(),month:c.getMonth(),year:c.getFullYear(),count:0},c=new Date(c.valueOf()-864e5),document.querySelector(".diagramm__subtitle_data-num").innerText="".concat(e.b[c.getMonth()]),document.querySelector(".diagramm__subtitle_data-month").innerText="".concat(c.getDate());var f,s=function(t){if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(t=i(t))){var n=0,r=function(){};return{s:r,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var e,o,u=!0,c=!1;return{s:function(){e=t[Symbol.iterator]()},n:function(){var t=e.next();return u=t.done,t},e:function(t){c=!0,o=t},f:function(){try{u||null==e.return||e.return()}finally{if(c)throw o}}}}(n);try{for(s.s();!(f=s.n()).done;){var l=f.value,p=new Date(l.publishedAt),v="".concat(p.getFullYear(),"-").concat(p.getMonth(),"-").concat(p.getDate());if(v in u){var y=o(l.title.matchAll(new RegExp("( |^)".concat(t),"ig"))).length;u[v].count+=y,u[v].count+=o(l.description.matchAll(new RegExp("( |^)".concat(t),"ig"))).length,r+=y}else console.warn("Not found ".concat(v),l)}}catch(t){s.e(t)}finally{s.f()}return{titleCount:r,weekDays:u}}(c.searchData,c.articles),n=t.titleCount,r=t.weekDays;document.querySelector(".analytics__num_headers").innerText=n;var u=Object.values(r).sort((function(t,n){var r=t.year-n.year;return 0==r&&(r=t.month-n.month),0==r&&(r=t.date-n.date),r})).slice(1),a=Math.max.apply(Math,o(u.map((function(t){return t.count}))));if(console.log(a),a<=40)a=40;else{var f=100*Math.round(a/100);a=f<a?100+f:f}for(var s=[0,Math.round(.25*a),Math.round(.5*a),Math.round(.75*a),a],l=0;l<s.length;++l)document.querySelector(".diagramm__scala_num:nth-child(".concat(l+1,")")).innerText=s[l];for(var p=function(t){console.log(u[t]);var n=document.querySelector(".digaramm__week_box:nth-child(".concat(t+1,")"));n.querySelector(".diagramm__week_day").innerText="".concat(u[t].date,", ").concat(u[t].dayWeek),setTimeout((function(){n.querySelector(".digaramm__week_quantity").style.maxWidth="".concat(Math.round(u[t].count/a*100),"%")}),100)},v=0;v<u.length;++v)p(v)}():location="/"},function(t,n,r){r(87)("iterator")},function(t,n,r){var e=r(9),o=r(121);e({target:"Array",stat:!0,forced:!r(73)((function(t){Array.from(t)}))},{from:o})},function(t,n,r){"use strict";var e=r(37),o=r(21),i=r(72),u=r(70),c=r(15),a=r(51),f=r(71);t.exports=function(t){var n,r,s,l,p,v,y=o(t),g="function"==typeof this?this:Array,d=arguments.length,h=d>1?arguments[1]:void 0,m=void 0!==h,x=f(y),b=0;if(m&&(h=e(h,d>2?arguments[2]:void 0,2)),null==x||g==Array&&u(x))for(r=new g(n=c(y.length));n>b;b++)v=m?h(y[b],b):y[b],a(r,b,v);else for(p=(l=x.call(y)).next,r=new g;!(s=p.call(l)).done;b++)v=m?i(l,h,[s.value,b],!0):s.value,a(r,b,v);return r.length=b,r}},function(t,n,r){var e=r(2),o=r(78),i=r(7),u=e("unscopables"),c=Array.prototype;null==c[u]&&i.f(c,u,{configurable:!0,value:o(null)}),t.exports=function(t){c[u][t]=!0}},function(t,n,r){var e=r(3);t.exports=!e((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,n,r){var e=r(5);t.exports=function(t){if(!e(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,n,r){"use strict";var e=r(9),o=r(17),i=r(21),u=r(3),c=r(81),a=[],f=a.sort,s=u((function(){a.sort(void 0)})),l=u((function(){a.sort(null)})),p=c("sort");e({target:"Array",proto:!0,forced:s||!l||!p},{sort:function(t){return void 0===t?f.call(i(this)):f.call(i(this),o(t))}})},function(t,n,r){var e=r(9),o=r(127).values;e({target:"Object",stat:!0},{values:function(t){return o(t)}})},function(t,n,r){var e=r(6),o=r(63),i=r(10),u=r(45).f,c=function(t){return function(n){for(var r,c=i(n),a=o(c),f=a.length,s=0,l=[];f>s;)r=a[s++],e&&!u.call(c,r)||l.push(t?[r,c[r]]:c[r]);return l}};t.exports={entries:c(!0),values:c(!1)}},function(t,n,r){var e=r(6),o=r(1),i=r(46),u=r(129),c=r(7).f,a=r(35).f,f=r(107),s=r(88),l=r(108),p=r(14),v=r(3),y=r(20).set,g=r(69),d=r(2)("match"),h=o.RegExp,m=h.prototype,x=/a/g,b=/a/g,S=new h(x)!==x,w=l.UNSUPPORTED_Y;if(e&&i("RegExp",!S||w||v((function(){return b[d]=!1,h(x)!=x||h(b)==b||"/a/i"!=h(x,"i")})))){for(var O=function(t,n){var r,e=this instanceof O,o=f(t),i=void 0===n;if(!e&&o&&t.constructor===O&&i)return t;S?o&&!i&&(t=t.source):t instanceof O&&(i&&(n=s.call(t)),t=t.source),w&&(r=!!n&&n.indexOf("y")>-1)&&(n=n.replace(/y/g,""));var c=u(S?new h(t,n):h(t,n),e?this:m,O);return w&&r&&y(c,{sticky:r}),c},_=function(t){t in O||c(O,t,{configurable:!0,get:function(){return h[t]},set:function(n){h[t]=n}})},A=a(h),E=0;A.length>E;)_(A[E++]);m.constructor=O,O.prototype=m,p(o,"RegExp",O)}g("RegExp")},function(t,n,r){var e=r(5),o=r(106);t.exports=function(t,n,r){var i,u;return o&&"function"==typeof(i=n.constructor)&&i!==r&&e(u=i.prototype)&&u!==r.prototype&&o(t,u),t}},function(t,n,r){"use strict";var e=r(9),o=r(131);e({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,n,r){"use strict";var e,o,i=r(88),u=r(108),c=RegExp.prototype.exec,a=String.prototype.replace,f=c,s=(e=/a/,o=/b*/g,c.call(e,"a"),c.call(o,"a"),0!==e.lastIndex||0!==o.lastIndex),l=u.UNSUPPORTED_Y||u.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(s||p||l)&&(f=function(t){var n,r,e,o,u=this,f=l&&u.sticky,v=i.call(u),y=u.source,g=0,d=t;return f&&(-1===(v=v.replace("y","")).indexOf("g")&&(v+="g"),d=String(t).slice(u.lastIndex),u.lastIndex>0&&(!u.multiline||u.multiline&&"\n"!==t[u.lastIndex-1])&&(y="(?: "+y+")",d=" "+d,g++),r=new RegExp("^(?:"+y+")",v)),p&&(r=new RegExp("^"+y+"$(?!\\s)",v)),s&&(n=u.lastIndex),e=c.call(f?r:u,d),f?e?(e.input=e.input.slice(g),e[0]=e[0].slice(g),e.index=u.lastIndex,u.lastIndex+=e[0].length):u.lastIndex=0:s&&e&&(u.lastIndex=u.global?e.index+e[0].length:n),p&&e&&e.length>1&&a.call(e[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(e[o]=void 0)})),e}),t.exports=f},function(t,n,r){"use strict";var e=r(14),o=r(8),i=r(3),u=r(88),c=RegExp.prototype,a=c.toString,f=i((function(){return"/a/b"!=a.call({source:"a",flags:"b"})})),s="toString"!=a.name;(f||s)&&e(RegExp.prototype,"toString",(function(){var t=o(this),n=String(t.source),r=t.flags;return"/"+n+"/"+String(void 0===r&&t instanceof RegExp&&!("flags"in c)?u.call(t):r)}),{unsafe:!0})},function(t,n,r){"use strict";var e=r(109).charAt,o=r(20),i=r(102),u=o.set,c=o.getterFor("String Iterator");i(String,"String",(function(t){u(this,{type:"String Iterator",string:String(t),index:0})}),(function(){var t,n=c(this),r=n.string,o=n.index;return o>=r.length?{value:void 0,done:!0}:(t=e(r,o),n.index+=t.length,{value:t,done:!1})}))},function(t,n,r){"use strict";var e=r(9),o=r(103),i=r(24),u=r(15),c=r(17),a=r(8),f=r(12),s=r(107),l=r(88),p=r(11),v=r(3),y=r(2),g=r(61),d=r(135),h=r(20),m=r(18),x=y("matchAll"),b=h.set,S=h.getterFor("RegExp String Iterator"),w=RegExp.prototype,O=w.exec,_="".matchAll,A=!!_&&!v((function(){"a".matchAll(/./)})),E=o((function(t,n,r,e){b(this,{type:"RegExp String Iterator",regexp:t,string:n,global:r,unicode:e,done:!1})}),"RegExp String",(function(){var t=S(this);if(t.done)return{value:void 0,done:!0};var n=t.regexp,r=t.string,e=function(t,n){var r,e=t.exec;if("function"==typeof e){if("object"!=typeof(r=e.call(t,n)))throw TypeError("Incorrect exec result");return r}return O.call(t,n)}(n,r);return null===e?{value:void 0,done:t.done=!0}:t.global?(""==String(e[0])&&(n.lastIndex=d(r,u(n.lastIndex),t.unicode)),{value:e,done:!1}):(t.done=!0,{value:e,done:!1})})),j=function(t){var n,r,e,o,i,c,f=a(this),s=String(t);return n=g(f,RegExp),void 0===(r=f.flags)&&f instanceof RegExp&&!("flags"in w)&&(r=l.call(f)),e=void 0===r?"":String(r),o=new n(n===RegExp?f.source:f,e),i=!!~e.indexOf("g"),c=!!~e.indexOf("u"),o.lastIndex=u(f.lastIndex),new E(o,s,i,c)};e({target:"String",proto:!0,forced:A},{matchAll:function(t){var n,r,e,o=i(this);if(null!=t){if(s(t)&&!~String(i("flags"in w?t.flags:l.call(t))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(A)return _.apply(o,arguments);if(void 0===(r=t[x])&&m&&"RegExp"==f(t)&&(r=j),null!=r)return c(r).call(t,o)}else if(A)return _.apply(o,arguments);return n=String(o),e=new RegExp(t,"g"),m?j.call(e,n):e[x](n)}}),m||x in w||p(w,x,j)},function(t,n,r){"use strict";var e=r(109).charAt;t.exports=function(t,n,r){return n+(r?e(t,n).length:1)}},function(t,n,r){var e=r(1),o=r(137),i=r(101),u=r(11),c=r(2),a=c("iterator"),f=c("toStringTag"),s=i.values;for(var l in o){var p=e[l],v=p&&p.prototype;if(v){if(v[a]!==s)try{u(v,a,s)}catch(t){v[a]=s}if(v[f]||u(v,f,l),o[l])for(var y in i)if(v[y]!==i[y])try{u(v,y,i[y])}catch(t){v[y]=i[y]}}}},function(t,n){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,n,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbnN0YW50cy9Db25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FuYWx5dGljcy9hbmFseXRpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIm1vbnRocyIsIndlZWtEYXlOYW1lIiwic2VhcmNoUmVzYXVsdEdyaWQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzZWFyY2hSZXNhdWx0UHJvZ3Jlc3MiLCJzZWFyY2hSZXNhdWx0U2hvd01vcmUiLCJzZWFyY2hSZXNhdWx0RmFpbCIsInNlYXJjaFJlc2F1bHRIZWFkZXIiLCJzZWFyY2hSZXNhdWx0RGVzYyIsImNvbnN0YW50cyIsIk9ORV9XRUVLIiwiT05FX0RBWSIsIk5FV1NBUElfS0VZIiwiTkVXU0FQSV9VUkwiLCJDQVJEU19QRVJfU1RSSU5HIiwiR0lUSFVCX0FQSV9VUkwiLCJpdCIsIk1hdGgiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJzaGFyZWQiLCJoYXMiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiZXhlYyIsImVycm9yIiwiZmFpbHMiLCJERVNDUklQVE9SUyIsIklFOF9ET01fREVGSU5FIiwiYW5PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiZiIsIk8iLCJQIiwiQXR0cmlidXRlcyIsIlR5cGVFcnJvciIsImlzT2JqZWN0IiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwicmVkZWZpbmUiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwiaXNGb3JjZWQiLCJvcHRpb25zIiwic291cmNlIiwidGFyZ2V0IiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJ1bmRlZmluZWQiLCJzaGFtIiwiSW5kZXhlZE9iamVjdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInRvU3RyaW5nIiwic2xpY2UiLCJwYXRoIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpbnNwZWN0U291cmNlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInNwbGl0IiwidW5zYWZlIiwic2ltcGxlIiwiam9pbiIsInRoaXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJhcmd1bWVudCIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWwiLCJ2YWx1ZU9mIiwic2V0IiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsIldlYWtNYXAiLCJzdG9yZSIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJnZXR0ZXJGb3IiLCJUWVBFIiwic3RhdGUiLCJ0eXBlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjbGFzc29mIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJnIiwidGVzdCIsIndlbGxLbm93blN5bWJvbCIsIklTX1BVUkUiLCJwdXNoIiwidmVyc2lvbiIsImNvcHlyaWdodCIsImlkIiwicG9zdGZpeCIsInJhbmRvbSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZ1bmN0aW9uVG9TdHJpbmciLCJrZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJjb25jYXQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJ0aGF0IiwiYSIsImIiLCJhcHBseSIsIm1hdGNoIiwidXNlckFnZW50IiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCJWOF9WRVJTSU9OIiwiU1BFQ0lFUyIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJjb25zdHJ1Y3RvciIsImZvbyIsIkJvb2xlYW4iLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIlRPX1NUUklOR19UQUciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInJlc3VsdCIsInRyeUdldCIsImNhbGxlZSIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIlRBRyIsImdldEJ1aWx0SW4iLCJvcmlnaW5hbEFycmF5IiwiQyIsIiQiLCJ0b09iamVjdCIsInRvTGVuZ3RoIiwiY3JlYXRlUHJvcGVydHkiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIiwiU1BFQ0lFU19TVVBQT1JUIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsInByb3RvIiwiayIsImxlbiIsIkUiLCJBIiwicHJvcGVydHlLZXkiLCJpdGVyYXRvciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJpbmRleE9mIiwibmFtZXMiLCJtYXgiLCJpbmRleCIsImludGVnZXIiLCJjcmVhdGVNZXRob2QiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJmb3JFYWNoIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImNhY2hlIiwidGhyb3dlciIsIkFDQ0VTU09SUyIsImFyZ3VtZW50MCIsImFyZ3VtZW50MSIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJlbnVtQnVnS2V5cyIsImciLCJlIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsIkNPTlNUUlVDVE9SX05BTUUiLCJDb25zdHJ1Y3RvciIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwiQXJyYXlQcm90b3R5cGUiLCJFTlRSSUVTIiwicmV0dXJuTWV0aG9kIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwibmV4dCIsImRvbmUiLCJmcm9tIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJGIiwiUHJvcGVydGllcyIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyIsIm5hbWVSRSIsIiRtYXAiLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJVU0VTX1RPX0xFTkdUSCIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJOQU1FIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsImRvdEFsbCIsInVuaWNvZGUiLCJzdGlja3kiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJvYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwic2V0VG9TdHJpbmdUYWciLCIkZm9yRWFjaCIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsInNldEludGVybmFsU3RhdGUiLCJPYmplY3RQcm90b3R5cGUiLCIkU3ltYm9sIiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIndyYXAiLCJkZXNjcmlwdGlvbiIsInN5bWJvbCIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJzZXR0ZXIiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJzdHJpbmdpZnkiLCJyZXBsYWNlciIsInNwYWNlIiwiJHJlcGxhY2VyIiwiYXJncyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sUHJvdG90eXBlIiwic3ltYm9sVG9TdHJpbmciLCJuYXRpdmUiLCJyZWdleHAiLCJkZXNjIiwiMCIsIm5hdGl2ZVNsaWNlIiwic3RhcnQiLCJlbmQiLCJmaW4iLCJhZGRUb1Vuc2NvcGFibGVzIiwiZGVmaW5lSXRlcmF0b3IiLCJpdGVyYXRlZCIsImtpbmQiLCJBcmd1bWVudHMiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJyZXR1cm5UaGlzIiwiSXRlcmFibGUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInZhbHVlcyIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsIl9fcHJvdG9fXyIsIk1BVENIIiwiaXNSZWdFeHAiLCJSRSIsIlJlZ0V4cCIsIlVOU1VQUE9SVEVEX1kiLCJyZSIsImxhc3RJbmRleCIsIkJST0tFTl9DQVJFVCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwiZmlyc3QiLCJzZWNvbmQiLCJwb3NpdGlvbiIsInNpemUiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiY29kZUF0IiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImNvbnNvbGUiLCJsb2ciLCJzZWFyY2hEYXRhIiwiaW5uZXJUZXh0IiwiYXJ0aWNsZXMiLCJ0aXRsZUNvdW50Iiwid2Vla0RheXMiLCJkdCIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImRheVdlZWsiLCJnZXREYXkiLCJkYXRlIiwibW9udGgiLCJ5ZWFyIiwiY291bnQiLCJhcnRpY2xlIiwicHVibGlzaGVkQXQiLCJ0aXRsZUNvdW50QXJ0aWNsZSIsInRpdGxlIiwibWF0Y2hBbGwiLCJ3YXJuIiwiYXJ0aWNsZXNTdGF0aXN0aWNzIiwiYXJ0aWNsZXNTdGF0Iiwic29ydCIsIml0ZW0xIiwiaXRlbTIiLCJyZXMiLCJtYXhDb3VudCIsIml0ZW0iLCJ0bXBDb2VmZmljaWVudCIsInJvdW5kIiwicG9pbnRzIiwiZGlhZ3JhbUJveCIsInNldFRpbWVvdXQiLCJtYXhXaWR0aCIsImxvY2F0aW9uIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaXRlcmFibGUiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJhcnJheUxpa2UiLCJzdGVwIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJVTlNDT1BBQkxFUyIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJuYXRpdmVTb3J0IiwiRkFJTFNfT05fVU5ERUZJTkVEIiwiRkFJTFNfT05fTlVMTCIsIlNUUklDVF9NRVRIT0QiLCJjb21wYXJlZm4iLCIkdmFsdWVzIiwiVE9fRU5UUklFUyIsImluaGVyaXRJZlJlcXVpcmVkIiwiZ2V0RmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwic2V0U3BlY2llcyIsIk5hdGl2ZVJlZ0V4cCIsIlJlZ0V4cFByb3RvdHlwZSIsInJlMSIsInJlMiIsIkNPUlJFQ1RfTkVXIiwiUmVnRXhwV3JhcHBlciIsInBhdHRlcm4iLCJmbGFncyIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicHJveHkiLCJkdW1teSIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwic3RyIiwicmVDb3B5IiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJSIiwicmYiLCJwb2ludCIsImdldFJlZ0V4cEZsYWdzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwiTUFUQ0hfQUxMIiwiUkVHRVhQX1NUUklORyIsInJlZ0V4cEJ1aWx0aW5FeGVjIiwibmF0aXZlTWF0Y2hBbGwiLCJXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgiLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJmdWxsVW5pY29kZSIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2hBbGwiLCJmbGFnc1ZhbHVlIiwibWF0Y2hlciIsInJ4IiwiRE9NSXRlcmFibGVzIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsIkNPTExFQ1RJT05fTkFNRSIsIkNvbGxlY3Rpb24iLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEssK0JDaEZyRCxvUkFXYUMsRUFBUyxDQUNuQixTQUFVLFVBQVcsUUFBUyxTQUFVLE1BQU8sT0FBUSxPQUFRLFVBQVcsV0FBWSxVQUFXLFNBQVUsV0FHakdDLEVBQWMsQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUVuREMsRUFBb0JDLFNBQVNDLGNBQWMseUJBRTNDQyxFQUF3QkYsU0FBU0MsY0FBYyw2QkFFL0NFLEVBQXdCSCxTQUFTQyxjQUFjLDhCQUUvQ0csRUFBb0JKLFNBQVNDLGNBQWMseUJBRTNDSSxFQUFzQkwsU0FBU0MsY0FBYywyQkFFN0NLLEVBQW9CTixTQUFTQyxjQUFjLHlCQUV6Q00sSUE3QkcsQ0FDZkMsU0FBVSxPQUNWQyxRQUFTLE1BQ1RDLFlBQWEsbUNBQ2JDLFlBQWEsMENBQ2JDLGlCQUFrQixFQUNsQkMsZUFBZ0IsdUYsaUJDUm5CLDhCQUNFLE9BQU9DLEdBQU1BLEVBQUdDLE1BQVFBLE1BQVFELEdBSWxDbEQsRUFBT0QsUUFFTHFELEVBQTJCLGlCQUFkQyxZQUEwQkEsYUFDdkNELEVBQXVCLGlCQUFWRSxRQUFzQkEsU0FDbkNGLEVBQXFCLGlCQUFSRyxNQUFvQkEsT0FDakNILEVBQXVCLGlCQUFWSSxHQUFzQkEsSUFFbkNDLFNBQVMsY0FBVEEsSyxrQ0NaRixJQUFJRCxFQUFTLEVBQVEsR0FDakJFLEVBQVMsRUFBUSxJQUNqQkMsRUFBTSxFQUFRLEdBQ2RDLEVBQU0sRUFBUSxJQUNkQyxFQUFnQixFQUFRLElBQ3hCQyxFQUFvQixFQUFRLElBRTVCQyxFQUF3QkwsRUFBTyxPQUMvQjFDLEVBQVN3QyxFQUFPeEMsT0FDaEJnRCxFQUF3QkYsRUFBb0I5QyxFQUFTQSxHQUFVQSxFQUFPaUQsZUFBaUJMLEVBRTNGNUQsRUFBT0QsUUFBVSxTQUFVUyxHQUl2QixPQUhHbUQsRUFBSUksRUFBdUJ2RCxLQUMxQnFELEdBQWlCRixFQUFJM0MsRUFBUVIsR0FBT3VELEVBQXNCdkQsR0FBUVEsRUFBT1IsR0FDeEV1RCxFQUFzQnZELEdBQVF3RCxFQUFzQixVQUFZeEQsSUFDOUR1RCxFQUFzQnZELEssY0NmakNSLEVBQU9ELFFBQVUsU0FBVW1FLEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPQyxHQUNQLE9BQU8sSyxjQ0pYLElBQUlyQyxFQUFpQixHQUFHQSxlQUV4QjlCLEVBQU9ELFFBQVUsU0FBVW1ELEVBQUkxQixHQUM3QixPQUFPTSxFQUFlMUIsS0FBSzhDLEVBQUkxQixLLGNDSGpDeEIsRUFBT0QsUUFBVSxTQUFVbUQsR0FDekIsTUFBcUIsaUJBQVBBLEVBQXlCLE9BQVBBLEVBQTRCLG1CQUFQQSxJLGdCQ0R2RCxJQUFJa0IsRUFBUSxFQUFRLEdBR3BCcEUsRUFBT0QsU0FBV3FFLEdBQU0sV0FDdEIsT0FBOEUsR0FBdkV6RCxPQUFPQyxlQUFlLEdBQUksRUFBRyxDQUFFRSxJQUFLLFdBQWMsT0FBTyxLQUFRLE8sZ0JDSjFFLElBQUl1RCxFQUFjLEVBQVEsR0FDdEJDLEVBQWlCLEVBQVEsSUFDekJDLEVBQVcsRUFBUSxHQUNuQkMsRUFBYyxFQUFRLElBRXRCQyxFQUF1QjlELE9BQU9DLGVBSWxDYixFQUFRMkUsRUFBSUwsRUFBY0ksRUFBdUIsU0FBd0JFLEVBQUdDLEVBQUdDLEdBSTdFLEdBSEFOLEVBQVNJLEdBQ1RDLEVBQUlKLEVBQVlJLEdBQUcsR0FDbkJMLEVBQVNNLEdBQ0xQLEVBQWdCLElBQ2xCLE9BQU9HLEVBQXFCRSxFQUFHQyxFQUFHQyxHQUNsQyxNQUFPVixJQUNULEdBQUksUUFBU1UsR0FBYyxRQUFTQSxFQUFZLE1BQU1DLFVBQVUsMkJBRWhFLE1BREksVUFBV0QsSUFBWUYsRUFBRUMsR0FBS0MsRUFBVzNELE9BQ3RDeUQsSSxnQkNsQlQsSUFBSUksRUFBVyxFQUFRLEdBRXZCL0UsRUFBT0QsUUFBVSxTQUFVbUQsR0FDekIsSUFBSzZCLEVBQVM3QixHQUNaLE1BQU00QixVQUFVRSxPQUFPOUIsR0FBTSxxQkFDN0IsT0FBT0EsSSxnQkNMWCxJQUFJTSxFQUFTLEVBQVEsR0FDakJ5QixFQUEyQixFQUFRLElBQW1EUCxFQUN0RlEsRUFBOEIsRUFBUSxJQUN0Q0MsRUFBVyxFQUFRLElBQ25CQyxFQUFZLEVBQVEsSUFDcEJDLEVBQTRCLEVBQVEsSUFDcENDLEVBQVcsRUFBUSxJQWdCdkJ0RixFQUFPRCxRQUFVLFNBQVV3RixFQUFTQyxHQUNsQyxJQUdZQyxFQUFRakUsRUFBS2tFLEVBQWdCQyxFQUFnQkMsRUFIckRDLEVBQVNOLEVBQVFFLE9BQ2pCSyxFQUFTUCxFQUFRL0IsT0FDakJ1QyxFQUFTUixFQUFRUyxLQVNyQixHQU5FUCxFQURFSyxFQUNPdEMsRUFDQXVDLEVBQ0F2QyxFQUFPcUMsSUFBV1QsRUFBVVMsRUFBUSxLQUVuQ3JDLEVBQU9xQyxJQUFXLElBQUloRSxVQUV0QixJQUFLTCxLQUFPZ0UsRUFBUSxDQVE5QixHQVBBRyxFQUFpQkgsRUFBT2hFLEdBR3RCa0UsRUFGRUgsRUFBUVUsYUFDVkwsRUFBYVgsRUFBeUJRLEVBQVFqRSxLQUNmb0UsRUFBVzFFLE1BQ3BCdUUsRUFBT2pFLElBQ3RCOEQsRUFBU1EsRUFBU3RFLEVBQU1xRSxHQUFVRSxFQUFTLElBQU0sS0FBT3ZFLEVBQUsrRCxFQUFRVyxjQUU1Q0MsSUFBbkJULEVBQThCLENBQzNDLFVBQVdDLFVBQTBCRCxFQUFnQixTQUNyREwsRUFBMEJNLEVBQWdCRCxJQUd4Q0gsRUFBUWEsTUFBU1YsR0FBa0JBLEVBQWVVLE9BQ3BEbEIsRUFBNEJTLEVBQWdCLFFBQVEsR0FHdERSLEVBQVNNLEVBQVFqRSxFQUFLbUUsRUFBZ0JKLE0sZ0JDbEQxQyxJQUFJYyxFQUFnQixFQUFRLElBQ3hCQyxFQUF5QixFQUFRLElBRXJDdEcsRUFBT0QsUUFBVSxTQUFVbUQsR0FDekIsT0FBT21ELEVBQWNDLEVBQXVCcEQsTSxnQkNMOUMsSUFBSW1CLEVBQWMsRUFBUSxHQUN0QmtDLEVBQXVCLEVBQVEsR0FDL0JDLEVBQTJCLEVBQVEsSUFFdkN4RyxFQUFPRCxRQUFVc0UsRUFBYyxTQUFVMUMsRUFBUUgsRUFBS04sR0FDcEQsT0FBT3FGLEVBQXFCN0IsRUFBRS9DLEVBQVFILEVBQUtnRixFQUF5QixFQUFHdEYsS0FDckUsU0FBVVMsRUFBUUgsRUFBS04sR0FFekIsT0FEQVMsRUFBT0gsR0FBT04sRUFDUFMsSSxjQ1JULElBQUk4RSxFQUFXLEdBQUdBLFNBRWxCekcsRUFBT0QsUUFBVSxTQUFVbUQsR0FDekIsT0FBT3VELEVBQVNyRyxLQUFLOEMsR0FBSXdELE1BQU0sR0FBSSxLLGdCQ0hyQyxJQUFJQyxFQUFPLEVBQVEsSUFDZm5ELEVBQVMsRUFBUSxHQUVqQm9ELEVBQVksU0FBVUMsR0FDeEIsTUFBMEIsbUJBQVpBLEVBQXlCQSxPQUFXVixHQUdwRG5HLEVBQU9ELFFBQVUsU0FBVStHLEVBQVdDLEdBQ3BDLE9BQU9DLFVBQVVDLE9BQVMsRUFBSUwsRUFBVUQsRUFBS0csS0FBZUYsRUFBVXBELEVBQU9zRCxJQUN6RUgsRUFBS0csSUFBY0gsRUFBS0csR0FBV0MsSUFBV3ZELEVBQU9zRCxJQUFjdEQsRUFBT3NELEdBQVdDLEssZ0JDVDNGLElBQUl2RCxFQUFTLEVBQVEsR0FDakIwQixFQUE4QixFQUFRLElBQ3RDdkIsRUFBTSxFQUFRLEdBQ2R5QixFQUFZLEVBQVEsSUFDcEI4QixFQUFnQixFQUFRLElBQ3hCQyxFQUFzQixFQUFRLElBRTlCQyxFQUFtQkQsRUFBb0JyRyxJQUN2Q3VHLEVBQXVCRixFQUFvQkcsUUFDM0NDLEVBQVd2QyxPQUFPQSxRQUFRd0MsTUFBTSxXQUVuQ3hILEVBQU9ELFFBQVUsU0FBVTRFLEVBQUduRCxFQUFLTixFQUFPcUUsR0FDekMsSUFBSWtDLElBQVNsQyxLQUFZQSxFQUFRa0MsT0FDN0JDLElBQVNuQyxLQUFZQSxFQUFRMUUsV0FDN0JvRixJQUFjVixLQUFZQSxFQUFRVSxZQUNsQixtQkFBVC9FLElBQ1MsaUJBQVBNLEdBQW9CbUMsRUFBSXpDLEVBQU8sU0FBU2dFLEVBQTRCaEUsRUFBTyxPQUFRTSxHQUM5RjZGLEVBQXFCbkcsR0FBT3NFLE9BQVMrQixFQUFTSSxLQUFtQixpQkFBUG5HLEVBQWtCQSxFQUFNLEtBRWhGbUQsSUFBTW5CLEdBSUVpRSxHQUVBeEIsR0FBZXRCLEVBQUVuRCxLQUMzQmtHLEdBQVMsVUFGRi9DLEVBQUVuRCxHQUlQa0csRUFBUS9DLEVBQUVuRCxHQUFPTixFQUNoQmdFLEVBQTRCUCxFQUFHbkQsRUFBS04sSUFUbkN3RyxFQUFRL0MsRUFBRW5ELEdBQU9OLEVBQ2hCa0UsRUFBVTVELEVBQUtOLEtBVXJCdUMsU0FBUzVCLFVBQVcsWUFBWSxXQUNqQyxNQUFzQixtQkFBUitGLE1BQXNCUixFQUFpQlEsTUFBTXBDLFFBQVUwQixFQUFjVSxVLGdCQ2hDckYsSUFBSUMsRUFBWSxFQUFRLElBRXBCQyxFQUFNM0UsS0FBSzJFLElBSWY5SCxFQUFPRCxRQUFVLFNBQVVnSSxHQUN6QixPQUFPQSxFQUFXLEVBQUlELEVBQUlELEVBQVVFLEdBQVcsa0JBQW9CLEksY0NQckUvSCxFQUFPRCxRQUFVLFNBQVVpSSxFQUFROUcsR0FDakMsTUFBTyxDQUNMTCxhQUF1QixFQUFUbUgsR0FDZEMsZUFBeUIsRUFBVEQsR0FDaEJFLFdBQXFCLEVBQVRGLEdBQ1o5RyxNQUFPQSxLLGNDTFhsQixFQUFPRCxRQUFVLFNBQVVtRCxHQUN6QixHQUFpQixtQkFBTkEsRUFDVCxNQUFNNEIsVUFBVUUsT0FBTzlCLEdBQU0sc0JBQzdCLE9BQU9BLEksY0NIWGxELEVBQU9ELFNBQVUsRyxnQkNBakIsSUFBSWdGLEVBQVcsRUFBUSxHQU12Qi9FLEVBQU9ELFFBQVUsU0FBVW9JLEVBQU9DLEdBQ2hDLElBQUtyRCxFQUFTb0QsR0FBUSxPQUFPQSxFQUM3QixJQUFJRSxFQUFJQyxFQUNSLEdBQUlGLEdBQW9ELG1CQUF4QkMsRUFBS0YsRUFBTTFCLFlBQTRCMUIsRUFBU3VELEVBQU1ELEVBQUdqSSxLQUFLK0gsSUFBUyxPQUFPRyxFQUM5RyxHQUFtQyxtQkFBdkJELEVBQUtGLEVBQU1JLFdBQTJCeEQsRUFBU3VELEVBQU1ELEVBQUdqSSxLQUFLK0gsSUFBUyxPQUFPRyxFQUN6RixJQUFLRixHQUFvRCxtQkFBeEJDLEVBQUtGLEVBQU0xQixZQUE0QjFCLEVBQVN1RCxFQUFNRCxFQUFHakksS0FBSytILElBQVMsT0FBT0csRUFDL0csTUFBTXhELFVBQVUsNkMsZ0JDWmxCLElBU0kwRCxFQUFLMUgsRUFBSzZDLEVBVFY4RSxFQUFrQixFQUFRLElBQzFCakYsRUFBUyxFQUFRLEdBQ2pCdUIsRUFBVyxFQUFRLEdBQ25CRyxFQUE4QixFQUFRLElBQ3RDd0QsRUFBWSxFQUFRLEdBQ3BCQyxFQUFZLEVBQVEsSUFDcEJDLEVBQWEsRUFBUSxJQUVyQkMsRUFBVXJGLEVBQU9xRixRQWdCckIsR0FBSUosRUFBaUIsQ0FDbkIsSUFBSUssRUFBUSxJQUFJRCxFQUNaRSxFQUFRRCxFQUFNaEksSUFDZGtJLEVBQVFGLEVBQU1uRixJQUNkc0YsRUFBUUgsRUFBTU4sSUFDbEJBLEVBQU0sU0FBVXRGLEVBQUlnRyxHQUVsQixPQURBRCxFQUFNN0ksS0FBSzBJLEVBQU81RixFQUFJZ0csR0FDZkEsR0FFVHBJLEVBQU0sU0FBVW9DLEdBQ2QsT0FBTzZGLEVBQU0zSSxLQUFLMEksRUFBTzVGLElBQU8sSUFFbENTLEVBQU0sU0FBVVQsR0FDZCxPQUFPOEYsRUFBTTVJLEtBQUswSSxFQUFPNUYsUUFFdEIsQ0FDTCxJQUFJaUcsRUFBUVIsRUFBVSxTQUN0QkMsRUFBV08sSUFBUyxFQUNwQlgsRUFBTSxTQUFVdEYsRUFBSWdHLEdBRWxCLE9BREFoRSxFQUE0QmhDLEVBQUlpRyxFQUFPRCxHQUNoQ0EsR0FFVHBJLEVBQU0sU0FBVW9DLEdBQ2QsT0FBT3dGLEVBQVV4RixFQUFJaUcsR0FBU2pHLEVBQUdpRyxHQUFTLElBRTVDeEYsRUFBTSxTQUFVVCxHQUNkLE9BQU93RixFQUFVeEYsRUFBSWlHLElBSXpCbkosRUFBT0QsUUFBVSxDQUNmeUksSUFBS0EsRUFDTDFILElBQUtBLEVBQ0w2QyxJQUFLQSxFQUNMMkQsUUEvQ1ksU0FBVXBFLEdBQ3RCLE9BQU9TLEVBQUlULEdBQU1wQyxFQUFJb0MsR0FBTXNGLEVBQUl0RixFQUFJLEtBK0NuQ2tHLFVBNUNjLFNBQVVDLEdBQ3hCLE9BQU8sU0FBVW5HLEdBQ2YsSUFBSW9HLEVBQ0osSUFBS3ZFLEVBQVM3QixLQUFRb0csRUFBUXhJLEVBQUlvQyxJQUFLcUcsT0FBU0YsRUFDOUMsTUFBTXZFLFVBQVUsMEJBQTRCdUUsRUFBTyxhQUNuRCxPQUFPQyxNLGdCQ3BCYixJQUFJaEQsRUFBeUIsRUFBUSxJQUlyQ3RHLEVBQU9ELFFBQVUsU0FBVWdJLEdBQ3pCLE9BQU9wSCxPQUFPMkYsRUFBdUJ5QixNLGNDTHZDL0gsRUFBT0QsUUFBVSxJLGdCQ0FqQixJQUFJc0UsRUFBYyxFQUFRLEdBQ3RCbUYsRUFBNkIsRUFBUSxJQUNyQ2hELEVBQTJCLEVBQVEsSUFDbkNpRCxFQUFrQixFQUFRLElBQzFCakYsRUFBYyxFQUFRLElBQ3RCYixFQUFNLEVBQVEsR0FDZFcsRUFBaUIsRUFBUSxJQUV6Qm9GLEVBQWlDL0ksT0FBT3NFLHlCQUk1Q2xGLEVBQVEyRSxFQUFJTCxFQUFjcUYsRUFBaUMsU0FBa0MvRSxFQUFHQyxHQUc5RixHQUZBRCxFQUFJOEUsRUFBZ0I5RSxHQUNwQkMsRUFBSUosRUFBWUksR0FBRyxHQUNmTixFQUFnQixJQUNsQixPQUFPb0YsRUFBK0IvRSxFQUFHQyxHQUN6QyxNQUFPVCxJQUNULEdBQUlSLEVBQUlnQixFQUFHQyxHQUFJLE9BQU80QixHQUEwQmdELEVBQTJCOUUsRUFBRXRFLEtBQUt1RSxFQUFHQyxHQUFJRCxFQUFFQyxNLGNDaEI3RjVFLEVBQU9ELFFBQVUsU0FBVW1ELEdBQ3pCLEdBQVVpRCxNQUFOakQsRUFBaUIsTUFBTTRCLFVBQVUsd0JBQTBCNUIsR0FDL0QsT0FBT0EsSSxnQkNKVCxJQUFJeUcsRUFBVSxFQUFRLElBSXRCM0osRUFBT0QsUUFBVTZKLE1BQU1DLFNBQVcsU0FBaUJDLEdBQ2pELE1BQXVCLFNBQWhCSCxFQUFRRyxLLGdCQ0xqQixJQUdJQyxFQUFPLEdBRVhBLEVBTHNCLEVBQVEsRUFFVkMsQ0FBZ0IsZ0JBR2QsSUFFdEJoSyxFQUFPRCxRQUEyQixlQUFqQmlGLE9BQU8rRSxJLGdCQ1B4QixJQUFJdkcsRUFBUyxFQUFRLEdBQ2pCMEIsRUFBOEIsRUFBUSxJQUUxQ2xGLEVBQU9ELFFBQVUsU0FBVXlCLEVBQUtOLEdBQzlCLElBQ0VnRSxFQUE0QjFCLEVBQVFoQyxFQUFLTixHQUN6QyxNQUFPaUQsR0FDUFgsRUFBT2hDLEdBQU9OLEVBQ2QsT0FBT0EsSSxjQ1JYbEIsRUFBT0QsUUFBVSxJLGdCQ0FqQixJQUFJa0ssRUFBVSxFQUFRLElBQ2xCbkIsRUFBUSxFQUFRLEtBRW5COUksRUFBT0QsUUFBVSxTQUFVeUIsRUFBS04sR0FDL0IsT0FBTzRILEVBQU10SCxLQUFTc0gsRUFBTXRILFFBQWlCMkUsSUFBVmpGLEVBQXNCQSxFQUFRLE1BQ2hFLFdBQVksSUFBSWdKLEtBQUssQ0FDdEJDLFFBQVMsUUFDVC9JLEtBQU02SSxFQUFVLE9BQVMsU0FDekJHLFVBQVcsMEMsY0NSYixJQUFJQyxFQUFLLEVBQ0xDLEVBQVVuSCxLQUFLb0gsU0FFbkJ2SyxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixNQUFPLFVBQVl3RCxZQUFlbUIsSUFBUjNFLEVBQW9CLEdBQUtBLEdBQU8sUUFBVTZJLEVBQUtDLEdBQVM3RCxTQUFTLE0sZ0JDSjdGLElBQUlyQyxFQUFRLEVBQVEsR0FFcEJwRSxFQUFPRCxVQUFZWSxPQUFPNkosd0JBQTBCcEcsR0FBTSxXQUd4RCxPQUFRWSxPQUFPaEUsYyxnQkNMakIsSUFBSThILEVBQVEsRUFBUSxJQUVoQjJCLEVBQW1CaEgsU0FBU2dELFNBR0UsbUJBQXZCcUMsRUFBTTVCLGdCQUNmNEIsRUFBTTVCLGNBQWdCLFNBQVVoRSxHQUM5QixPQUFPdUgsRUFBaUJySyxLQUFLOEMsS0FJakNsRCxFQUFPRCxRQUFVK0ksRUFBTTVCLGUsZ0JDWHZCLElBQUl4RCxFQUFTLEVBQVEsSUFDakJFLEVBQU0sRUFBUSxJQUVkOEcsRUFBT2hILEVBQU8sUUFFbEIxRCxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixPQUFPa0osRUFBS2xKLEtBQVNrSixFQUFLbEosR0FBT29DLEVBQUlwQyxNLGdCQ052QyxJQUFJNEMsRUFBUSxFQUFRLEdBQ2hCdUYsRUFBVSxFQUFRLElBRWxCbkMsRUFBUSxHQUFHQSxNQUdmeEgsRUFBT0QsUUFBVXFFLEdBQU0sV0FHckIsT0FBUXpELE9BQU8sS0FBS2dLLHFCQUFxQixNQUN0QyxTQUFVekgsR0FDYixNQUFzQixVQUFmeUcsRUFBUXpHLEdBQWtCc0UsRUFBTXBILEtBQUs4QyxFQUFJLElBQU12QyxPQUFPdUMsSUFDM0R2QyxRLGdCQ1pKLElBQUlpSyxFQUFxQixFQUFRLElBRzdCaEMsRUFGYyxFQUFRLElBRUdpQyxPQUFPLFNBQVUsYUFJOUM5SyxFQUFRMkUsRUFBSS9ELE9BQU9tSyxxQkFBdUIsU0FBNkJuRyxHQUNyRSxPQUFPaUcsRUFBbUJqRyxFQUFHaUUsSyxjQ1IvQixJQUFJbUMsRUFBTzVILEtBQUs0SCxLQUNaQyxFQUFRN0gsS0FBSzZILE1BSWpCaEwsRUFBT0QsUUFBVSxTQUFVZ0ksR0FDekIsT0FBT2tELE1BQU1sRCxHQUFZQSxHQUFZLEdBQUtBLEVBQVcsRUFBSWlELEVBQVFELEdBQU1oRCxLLGdCQ056RSxJQUFJbkIsRUFBWSxFQUFRLElBR3hCNUcsRUFBT0QsUUFBVSxTQUFVc0ksRUFBSTZDLEVBQU1qRSxHQUVuQyxHQURBTCxFQUFVeUIsUUFDR2xDLElBQVQrRSxFQUFvQixPQUFPN0MsRUFDL0IsT0FBUXBCLEdBQ04sS0FBSyxFQUFHLE9BQU8sV0FDYixPQUFPb0IsRUFBR2pJLEtBQUs4SyxJQUVqQixLQUFLLEVBQUcsT0FBTyxTQUFVQyxHQUN2QixPQUFPOUMsRUFBR2pJLEtBQUs4SyxFQUFNQyxJQUV2QixLQUFLLEVBQUcsT0FBTyxTQUFVQSxFQUFHQyxHQUMxQixPQUFPL0MsRUFBR2pJLEtBQUs4SyxFQUFNQyxFQUFHQyxJQUUxQixLQUFLLEVBQUcsT0FBTyxTQUFVRCxFQUFHQyxFQUFHOUssR0FDN0IsT0FBTytILEVBQUdqSSxLQUFLOEssRUFBTUMsRUFBR0MsRUFBRzlLLElBRy9CLE9BQU8sV0FDTCxPQUFPK0gsRUFBR2dELE1BQU1ILEVBQU1sRSxjLGdCQ3JCMUIsSUFNSXNFLEVBQU9uQixFQU5QM0csRUFBUyxFQUFRLEdBQ2pCK0gsRUFBWSxFQUFRLElBRXBCQyxFQUFVaEksRUFBT2dJLFFBQ2pCQyxFQUFXRCxHQUFXQSxFQUFRQyxTQUM5QkMsRUFBS0QsR0FBWUEsRUFBU0MsR0FHMUJBLEVBRUZ2QixHQURBbUIsRUFBUUksRUFBR2xFLE1BQU0sTUFDRCxHQUFLOEQsRUFBTSxHQUNsQkMsTUFDVEQsRUFBUUMsRUFBVUQsTUFBTSxpQkFDVkEsRUFBTSxJQUFNLE1BQ3hCQSxFQUFRQyxFQUFVRCxNQUFNLG9CQUNibkIsRUFBVW1CLEVBQU0sSUFJL0J0TCxFQUFPRCxRQUFVb0ssSUFBWUEsRyxnQkNuQjdCLElBQUkvRixFQUFRLEVBQVEsR0FDaEI0RixFQUFrQixFQUFRLEdBQzFCMkIsRUFBYSxFQUFRLElBRXJCQyxFQUFVNUIsRUFBZ0IsV0FFOUJoSyxFQUFPRCxRQUFVLFNBQVU4TCxHQUl6QixPQUFPRixHQUFjLEtBQU92SCxHQUFNLFdBQ2hDLElBQUkwSCxFQUFRLEdBS1osT0FKa0JBLEVBQU1DLFlBQWMsSUFDMUJILEdBQVcsV0FDckIsTUFBTyxDQUFFSSxJQUFLLElBRTJCLElBQXBDRixFQUFNRCxHQUFhSSxTQUFTRCxTLGdCQ2hCdkMsSUFBSXhJLEVBQVMsRUFBUSxHQUNqQnVCLEVBQVcsRUFBUSxHQUVuQjNDLEVBQVdvQixFQUFPcEIsU0FFbEI4SixFQUFTbkgsRUFBUzNDLElBQWEyQyxFQUFTM0MsRUFBUytKLGVBRXJEbk0sRUFBT0QsUUFBVSxTQUFVbUQsR0FDekIsT0FBT2dKLEVBQVM5SixFQUFTK0osY0FBY2pKLEdBQU0sSyxjQ1AvQ2xELEVBQU9ELFFBQVUsQ0FDZixjQUNBLGlCQUNBLGdCQUNBLHVCQUNBLGlCQUNBLFdBQ0EsWSxnQkNSRixJQUFJeUQsRUFBUyxFQUFRLEdBQ2pCNEIsRUFBWSxFQUFRLElBR3BCMEQsRUFBUXRGLEVBREMsdUJBQ2lCNEIsRUFEakIscUJBQ21DLElBRWhEcEYsRUFBT0QsUUFBVStJLEcsZ0JDTmpCLElBQUl6RSxFQUFjLEVBQVEsR0FDdEJELEVBQVEsRUFBUSxHQUNoQitILEVBQWdCLEVBQVEsSUFHNUJuTSxFQUFPRCxTQUFXc0UsSUFBZ0JELEdBQU0sV0FDdEMsT0FFUSxHQUZEekQsT0FBT0MsZUFBZXVMLEVBQWMsT0FBUSxJQUFLLENBQ3REckwsSUFBSyxXQUFjLE9BQU8sS0FDekJxSyxNLGdCQ1JMLElBQUlpQixFQUF3QixFQUFRLElBQ2hDQyxFQUFhLEVBQVEsSUFHckJDLEVBRmtCLEVBQVEsRUFFVnRDLENBQWdCLGVBRWhDdUMsRUFBdUUsYUFBbkRGLEVBQVcsV0FBYyxPQUFPckYsVUFBckIsSUFVbkNoSCxFQUFPRCxRQUFVcU0sRUFBd0JDLEVBQWEsU0FBVW5KLEdBQzlELElBQUl5QixFQUFHNkgsRUFBS0MsRUFDWixZQUFjdEcsSUFBUGpELEVBQW1CLFlBQXFCLE9BQVBBLEVBQWMsT0FFTSxpQkFBaERzSixFQVhELFNBQVV0SixFQUFJMUIsR0FDekIsSUFDRSxPQUFPMEIsRUFBRzFCLEdBQ1YsTUFBTzJDLEtBUVN1SSxDQUFPL0gsRUFBSWhFLE9BQU91QyxHQUFLb0osSUFBOEJFLEVBRW5FRCxFQUFvQkYsRUFBVzFILEdBRUgsV0FBM0I4SCxFQUFTSixFQUFXMUgsS0FBc0MsbUJBQVpBLEVBQUVnSSxPQUF1QixZQUFjRixJLDZCQ3ZCNUYsSUFBSUcsRUFBNkIsR0FBR2pDLHFCQUNoQzFGLEVBQTJCdEUsT0FBT3NFLHlCQUdsQzRILEVBQWM1SCxJQUE2QjJILEVBQTJCeE0sS0FBSyxDQUFFME0sRUFBRyxHQUFLLEdBSXpGL00sRUFBUTJFLEVBQUltSSxFQUFjLFNBQThCRSxHQUN0RCxJQUFJbkgsRUFBYVgsRUFBeUIyQyxLQUFNbUYsR0FDaEQsUUFBU25ILEdBQWNBLEVBQVcvRSxZQUNoQytMLEcsZ0JDWkosSUFBSXhJLEVBQVEsRUFBUSxHQUVoQjRJLEVBQWMsa0JBRWQxSCxFQUFXLFNBQVUySCxFQUFTQyxHQUNoQyxJQUFJaE0sRUFBUWlNLEVBQUtDLEVBQVVILElBQzNCLE9BQU8vTCxHQUFTbU0sR0FDWm5NLEdBQVNvTSxJQUNXLG1CQUFiSixFQUEwQjlJLEVBQU04SSxLQUNyQ0EsSUFHSkUsRUFBWTlILEVBQVM4SCxVQUFZLFNBQVVHLEdBQzdDLE9BQU92SSxPQUFPdUksR0FBUUMsUUFBUVIsRUFBYSxLQUFLUyxlQUc5Q04sRUFBTzdILEVBQVM2SCxLQUFPLEdBQ3ZCRyxFQUFTaEksRUFBU2dJLE9BQVMsSUFDM0JELEVBQVcvSCxFQUFTK0gsU0FBVyxJQUVuQ3JOLEVBQU9ELFFBQVV1RixHLGdCQ3BCakIsSUFBSTFFLEVBQWlCLEVBQVEsR0FBdUM4RCxFQUNoRWYsRUFBTSxFQUFRLEdBR2QySSxFQUZrQixFQUFRLEVBRVZ0QyxDQUFnQixlQUVwQ2hLLEVBQU9ELFFBQVUsU0FBVW1ELEVBQUl3SyxFQUFLM0gsR0FDOUI3QyxJQUFPUyxFQUFJVCxFQUFLNkMsRUFBUzdDLEVBQUtBLEVBQUdyQixVQUFXeUssSUFDOUMxTCxFQUFlc0MsRUFBSW9KLEVBQWUsQ0FBRXJFLGNBQWMsRUFBTS9HLE1BQU93TSxNLGdCQ1JuRSxJQUFJQyxFQUFhLEVBQVEsSUFFekIzTixFQUFPRCxRQUFVNE4sRUFBVyxZQUFhLGNBQWdCLEksZ0JDRnpELElBQUk1SSxFQUFXLEVBQVEsR0FDbkI4RSxFQUFVLEVBQVEsSUFHbEIrQixFQUZrQixFQUFRLEVBRWhCNUIsQ0FBZ0IsV0FJOUJoSyxFQUFPRCxRQUFVLFNBQVU2TixFQUFlM0csR0FDeEMsSUFBSTRHLEVBU0YsT0FSRWhFLEVBQVErRCxLQUdNLG1CQUZoQkMsRUFBSUQsRUFBYzdCLGNBRWE4QixJQUFNakUsUUFBU0MsRUFBUWdFLEVBQUVoTSxXQUMvQ2tELEVBQVM4SSxJQUVOLFFBRFZBLEVBQUlBLEVBQUVqQyxNQUNVaUMsT0FBSTFILEdBSCtDMEgsT0FBSTFILEdBS2xFLFNBQVdBLElBQU4wSCxFQUFrQmpFLE1BQVFpRSxHQUFjLElBQVg1RyxFQUFlLEVBQUlBLEssNkJDakJoRSxJQUFJNkcsRUFBSSxFQUFRLEdBQ1oxSixFQUFRLEVBQVEsR0FDaEJ5RixFQUFVLEVBQVEsSUFDbEI5RSxFQUFXLEVBQVEsR0FDbkJnSixFQUFXLEVBQVEsSUFDbkJDLEVBQVcsRUFBUSxJQUNuQkMsRUFBaUIsRUFBUSxJQUN6QkMsRUFBcUIsRUFBUSxJQUM3QkMsRUFBK0IsRUFBUSxJQUN2Q25FLEVBQWtCLEVBQVEsR0FDMUIyQixFQUFhLEVBQVEsSUFFckJ5QyxFQUF1QnBFLEVBQWdCLHNCQU92Q3FFLEVBQStCMUMsR0FBYyxLQUFPdkgsR0FBTSxXQUM1RCxJQUFJMEgsRUFBUSxHQUVaLE9BREFBLEVBQU1zQyxJQUF3QixFQUN2QnRDLEVBQU1qQixTQUFTLEtBQU9pQixLQUczQndDLEVBQWtCSCxFQUE2QixVQUUvQ0ksRUFBcUIsU0FBVTVKLEdBQ2pDLElBQUtJLEVBQVNKLEdBQUksT0FBTyxFQUN6QixJQUFJNkosRUFBYTdKLEVBQUV5SixHQUNuQixZQUFzQmpJLElBQWZxSSxJQUE2QkEsRUFBYTNFLEVBQVFsRixJQVEzRG1KLEVBQUUsQ0FBRXJJLE9BQVEsUUFBU2dKLE9BQU8sRUFBTXZJLFFBTHBCbUksSUFBaUNDLEdBS0ssQ0FDbER6RCxPQUFRLFNBQWdCZixHQUN0QixJQUdJN0osRUFBR3lPLEVBQUd6SCxFQUFRMEgsRUFBS0MsRUFIbkJqSyxFQUFJb0osRUFBU25HLE1BQ2JpSCxFQUFJWCxFQUFtQnZKLEVBQUcsR0FDMUJqRCxFQUFJLEVBRVIsSUFBS3pCLEdBQUssRUFBR2dILEVBQVNELFVBQVVDLE9BQVFoSCxFQUFJZ0gsRUFBUWhILElBRWxELEdBREEyTyxHQUFXLElBQVAzTyxFQUFXMEUsRUFBSXFDLFVBQVUvRyxHQUN6QnNPLEVBQW1CSyxHQUFJLENBRXpCLEdBQUlsTixHQURKaU4sRUFBTVgsRUFBU1ksRUFBRTNILFNBbENGLGlCQW1DaUIsTUFBTW5DLFVBbENULGtDQW1DN0IsSUFBSzRKLEVBQUksRUFBR0EsRUFBSUMsRUFBS0QsSUFBS2hOLElBQVNnTixLQUFLRSxHQUFHWCxFQUFlWSxFQUFHbk4sRUFBR2tOLEVBQUVGLFFBQzdELENBQ0wsR0FBSWhOLEdBdENXLGlCQXNDWSxNQUFNb0QsVUFyQ0osa0NBc0M3Qm1KLEVBQWVZLEVBQUduTixJQUFLa04sR0FJM0IsT0FEQUMsRUFBRTVILE9BQVN2RixFQUNKbU4sTSw2QkN4RFgsSUFBSXJLLEVBQWMsRUFBUSxJQUN0QitCLEVBQXVCLEVBQVEsR0FDL0JDLEVBQTJCLEVBQVEsSUFFdkN4RyxFQUFPRCxRQUFVLFNBQVU0QixFQUFRSCxFQUFLTixHQUN0QyxJQUFJNE4sRUFBY3RLLEVBQVloRCxHQUMxQnNOLEtBQWVuTixFQUFRNEUsRUFBcUI3QixFQUFFL0MsRUFBUW1OLEVBQWF0SSxFQUF5QixFQUFHdEYsSUFDOUZTLEVBQU9tTixHQUFlNU4sSSxnQkNSN0IsSUFBSTJDLEVBQWdCLEVBQVEsSUFFNUI3RCxFQUFPRCxRQUFVOEQsSUFFWDdDLE9BQU9vRixNQUVrQixpQkFBbkJwRixPQUFPK04sVSxnQkNObkIsSUFBSXBMLEVBQU0sRUFBUSxHQUNkcUwsRUFBVSxFQUFRLElBQ2xCQyxFQUFpQyxFQUFRLElBQ3pDMUksRUFBdUIsRUFBUSxHQUVuQ3ZHLEVBQU9ELFFBQVUsU0FBVTBGLEVBQVFELEdBSWpDLElBSEEsSUFBSWtGLEVBQU9zRSxFQUFReEosR0FDZjVFLEVBQWlCMkYsRUFBcUI3QixFQUN0Q08sRUFBMkJnSyxFQUErQnZLLEVBQ3JEekUsRUFBSSxFQUFHQSxFQUFJeUssRUFBS3pELE9BQVFoSCxJQUFLLENBQ3BDLElBQUl1QixFQUFNa0osRUFBS3pLLEdBQ1YwRCxFQUFJOEIsRUFBUWpFLElBQU1aLEVBQWU2RSxFQUFRakUsRUFBS3lELEVBQXlCTyxFQUFRaEUsTyxnQkNYeEYsSUFBSWdDLEVBQVMsRUFBUSxHQUVyQnhELEVBQU9ELFFBQVV5RCxHLGdCQ0ZqQixJQUFJRyxFQUFNLEVBQVEsR0FDZDhGLEVBQWtCLEVBQVEsSUFDMUJ5RixFQUFVLEVBQVEsSUFBK0JBLFFBQ2pEdEcsRUFBYSxFQUFRLElBRXpCNUksRUFBT0QsUUFBVSxTQUFVNEIsRUFBUXdOLEdBQ2pDLElBR0kzTixFQUhBbUQsRUFBSThFLEVBQWdCOUgsR0FDcEIxQixFQUFJLEVBQ0p3TSxFQUFTLEdBRWIsSUFBS2pMLEtBQU9tRCxHQUFJaEIsRUFBSWlGLEVBQVlwSCxJQUFRbUMsRUFBSWdCLEVBQUduRCxJQUFRaUwsRUFBT3ZDLEtBQUsxSSxHQUVuRSxLQUFPMk4sRUFBTWxJLE9BQVNoSCxHQUFPMEQsRUFBSWdCLEVBQUduRCxFQUFNMk4sRUFBTWxQLFNBQzdDaVAsRUFBUXpDLEVBQVFqTCxJQUFRaUwsRUFBT3ZDLEtBQUsxSSxJQUV2QyxPQUFPaUwsSSxnQkNmVCxJQUFJNUUsRUFBWSxFQUFRLElBRXBCdUgsRUFBTWpNLEtBQUtpTSxJQUNYdEgsRUFBTTNFLEtBQUsyRSxJQUtmOUgsRUFBT0QsUUFBVSxTQUFVc1AsRUFBT3BJLEdBQ2hDLElBQUlxSSxFQUFVekgsRUFBVXdILEdBQ3hCLE9BQU9DLEVBQVUsRUFBSUYsRUFBSUUsRUFBVXJJLEVBQVEsR0FBS2EsRUFBSXdILEVBQVNySSxLLGNDVi9EbEgsRUFBUTJFLEVBQUkvRCxPQUFPNkosdUIsZ0JDQW5CLElBQUkvSSxFQUFPLEVBQVEsSUFDZjRFLEVBQWdCLEVBQVEsSUFDeEIwSCxFQUFXLEVBQVEsSUFDbkJDLEVBQVcsRUFBUSxJQUNuQkUsRUFBcUIsRUFBUSxJQUU3QmhFLEVBQU8sR0FBR0EsS0FHVnFGLEVBQWUsU0FBVWxHLEdBQzNCLElBQUltRyxFQUFpQixHQUFSbkcsRUFDVG9HLEVBQW9CLEdBQVJwRyxFQUNacUcsRUFBa0IsR0FBUnJHLEVBQ1ZzRyxFQUFtQixHQUFSdEcsRUFDWHVHLEVBQXdCLEdBQVJ2RyxFQUNoQndHLEVBQW1CLEdBQVJ4RyxHQUFhdUcsRUFDNUIsT0FBTyxTQUFVRSxFQUFPQyxFQUFZN0UsRUFBTThFLEdBU3hDLElBUkEsSUFPSTlPLEVBQU91TCxFQVBQOUgsRUFBSW9KLEVBQVMrQixHQUNidk0sRUFBTzhDLEVBQWMxQixHQUNyQnNMLEVBQWdCeE8sRUFBS3NPLEVBQVk3RSxFQUFNLEdBQ3ZDakUsRUFBUytHLEVBQVN6SyxFQUFLMEQsUUFDdkJvSSxFQUFRLEVBQ1I5TixFQUFTeU8sR0FBa0I5QixFQUMzQnpJLEVBQVMrSixFQUFTak8sRUFBT3VPLEVBQU83SSxHQUFVd0ksRUFBWWxPLEVBQU91TyxFQUFPLFFBQUszSixFQUV2RWMsRUFBU29JLEVBQU9BLElBQVMsSUFBSVEsR0FBWVIsS0FBUzlMLEtBRXREa0osRUFBU3dELEVBRFQvTyxFQUFRcUMsRUFBSzhMLEdBQ2lCQSxFQUFPMUssR0FDakMwRSxHQUNGLEdBQUltRyxFQUFRL0osRUFBTzRKLEdBQVM1QyxPQUN2QixHQUFJQSxFQUFRLE9BQVFwRCxHQUN2QixLQUFLLEVBQUcsT0FBTyxFQUNmLEtBQUssRUFBRyxPQUFPbkksRUFDZixLQUFLLEVBQUcsT0FBT21PLEVBQ2YsS0FBSyxFQUFHbkYsRUFBSzlKLEtBQUtxRixFQUFRdkUsUUFDckIsR0FBSXlPLEVBQVUsT0FBTyxFQUdoQyxPQUFPQyxHQUFpQixFQUFJRixHQUFXQyxFQUFXQSxFQUFXbEssSUFJakV6RixFQUFPRCxRQUFVLENBR2ZtUSxRQUFTWCxFQUFhLEdBR3RCWSxJQUFLWixFQUFhLEdBR2xCYSxPQUFRYixFQUFhLEdBR3JCYyxLQUFNZCxFQUFhLEdBR25CZSxNQUFPZixFQUFhLEdBR3BCZ0IsS0FBTWhCLEVBQWEsR0FHbkJpQixVQUFXakIsRUFBYSxLLGdCQy9EMUIsSUFBSWxMLEVBQWMsRUFBUSxHQUN0QkQsRUFBUSxFQUFRLEdBQ2hCVCxFQUFNLEVBQVEsR0FFZC9DLEVBQWlCRCxPQUFPQyxlQUN4QjZQLEVBQVEsR0FFUkMsRUFBVSxTQUFVeE4sR0FBTSxNQUFNQSxHQUVwQ2xELEVBQU9ELFFBQVUsU0FBVThMLEVBQWF0RyxHQUN0QyxHQUFJNUIsRUFBSThNLEVBQU81RSxHQUFjLE9BQU80RSxFQUFNNUUsR0FDckN0RyxJQUFTQSxFQUFVLElBQ3hCLElBQUl3QixFQUFTLEdBQUc4RSxHQUNaOEUsSUFBWWhOLEVBQUk0QixFQUFTLGNBQWVBLEVBQVFvTCxVQUNoREMsRUFBWWpOLEVBQUk0QixFQUFTLEdBQUtBLEVBQVEsR0FBS21MLEVBQzNDRyxFQUFZbE4sRUFBSTRCLEVBQVMsR0FBS0EsRUFBUSxRQUFLWSxFQUUvQyxPQUFPc0ssRUFBTTVFLEtBQWlCOUUsSUFBVzNDLEdBQU0sV0FDN0MsR0FBSXVNLElBQWN0TSxFQUFhLE9BQU8sRUFDdEMsSUFBSU0sRUFBSSxDQUFFc0MsUUFBUyxHQUVmMEosRUFBVy9QLEVBQWUrRCxFQUFHLEVBQUcsQ0FBRTlELFlBQVksRUFBTUMsSUFBSzRQLElBQ3hEL0wsRUFBRSxHQUFLLEVBRVpvQyxFQUFPM0csS0FBS3VFLEVBQUdpTSxFQUFXQyxRLGdCQ3hCOUIsSUFBSXpFLEVBQXdCLEVBQVEsSUFDaENqSCxFQUFXLEVBQVEsSUFDbkJzQixFQUFXLEVBQVEsSUFJbEIyRixHQUNIakgsRUFBU3hFLE9BQU9rQixVQUFXLFdBQVk0RSxFQUFVLENBQUVnQixRQUFRLEssZ0JDUDdELElBQUlsRCxFQUFXLEVBQVEsR0FDbkJxQyxFQUFZLEVBQVEsSUFHcEJnRixFQUZrQixFQUFRLEVBRWhCNUIsQ0FBZ0IsV0FJOUJoSyxFQUFPRCxRQUFVLFNBQVU0RSxFQUFHbU0sR0FDNUIsSUFDSUMsRUFEQWxELEVBQUl0SixFQUFTSSxHQUFHb0gsWUFFcEIsWUFBYTVGLElBQU4wSCxHQUFpRDFILE9BQTdCNEssRUFBSXhNLEVBQVNzSixHQUFHakMsSUFBeUJrRixFQUFxQmxLLEVBQVVtSyxLLGdCQ1hyRyxJQUFJcEQsRUFBYSxFQUFRLElBRXpCM04sRUFBT0QsUUFBVTROLEVBQVcsV0FBWSxvQixnQkNGeEMsSUFBSS9DLEVBQXFCLEVBQVEsSUFDN0JvRyxFQUFjLEVBQVEsSUFJMUJoUixFQUFPRCxRQUFVWSxPQUFPK0osTUFBUSxTQUFjL0YsR0FDNUMsT0FBT2lHLEVBQW1CakcsRUFBR3FNLEssY0NOL0IsSUFBSUMsRUFHSkEsRUFBSSxXQUNILE9BQU9ySixLQURKLEdBSUosSUFFQ3FKLEVBQUlBLEdBQUssSUFBSXhOLFNBQVMsY0FBYixHQUNSLE1BQU95TixHQUVjLGlCQUFYNU4sU0FBcUIyTixFQUFJM04sUUFPckN0RCxFQUFPRCxRQUFVa1IsRyxnQkNuQmpCLElBQUl6TixFQUFTLEVBQVEsR0FDakIwRCxFQUFnQixFQUFRLElBRXhCMkIsRUFBVXJGLEVBQU9xRixRQUVyQjdJLEVBQU9ELFFBQTZCLG1CQUFaOEksR0FBMEIsY0FBY2tCLEtBQUs3QyxFQUFjMkIsSyw2QkNKbkYsSUFBSXVELEVBQXdCLEVBQVEsSUFDaEN6QyxFQUFVLEVBQVEsSUFJdEIzSixFQUFPRCxRQUFVcU0sRUFBd0IsR0FBRzNGLFNBQVcsV0FDckQsTUFBTyxXQUFha0QsRUFBUS9CLE1BQVEsTSxnQkNQdEMsSUFBSStGLEVBQWEsRUFBUSxJQUNyQndELEVBQTRCLEVBQVEsSUFDcENDLEVBQThCLEVBQVEsSUFDdEM3TSxFQUFXLEVBQVEsR0FHdkJ2RSxFQUFPRCxRQUFVNE4sRUFBVyxVQUFXLFlBQWMsU0FBaUJ6SyxHQUNwRSxJQUFJd0gsRUFBT3lHLEVBQTBCek0sRUFBRUgsRUFBU3JCLElBQzVDc0gsRUFBd0I0RyxFQUE0QjFNLEVBQ3hELE9BQU84RixFQUF3QkUsRUFBS0csT0FBT0wsRUFBc0J0SCxJQUFPd0gsSSxnQkNUMUUsSUFBSWpCLEVBQWtCLEVBQVEsSUFDMUJ1RSxFQUFXLEVBQVEsSUFDbkJxRCxFQUFrQixFQUFRLElBRzFCOUIsRUFBZSxTQUFVK0IsR0FDM0IsT0FBTyxTQUFVeEIsRUFBT3lCLEVBQUlDLEdBQzFCLElBR0l0USxFQUhBeUQsRUFBSThFLEVBQWdCcUcsR0FDcEI3SSxFQUFTK0csRUFBU3JKLEVBQUVzQyxRQUNwQm9JLEVBQVFnQyxFQUFnQkcsRUFBV3ZLLEdBSXZDLEdBQUlxSyxHQUFlQyxHQUFNQSxHQUFJLEtBQU90SyxFQUFTb0ksR0FHM0MsSUFGQW5PLEVBQVF5RCxFQUFFMEssT0FFR25PLEVBQU8sT0FBTyxPQUV0QixLQUFNK0YsRUFBU29JLEVBQU9BLElBQzNCLElBQUtpQyxHQUFlakMsS0FBUzFLLElBQU1BLEVBQUUwSyxLQUFXa0MsRUFBSSxPQUFPRCxHQUFlakMsR0FBUyxFQUNuRixPQUFRaUMsSUFBZ0IsSUFJOUJ0UixFQUFPRCxRQUFVLENBR2YwUixTQUFVbEMsR0FBYSxHQUd2QkwsUUFBU0ssR0FBYSxLLDZCQzdCeEIsSUFBSTVCLEVBQWEsRUFBUSxJQUNyQnBILEVBQXVCLEVBQVEsR0FDL0J5RCxFQUFrQixFQUFRLEdBQzFCM0YsRUFBYyxFQUFRLEdBRXRCdUgsRUFBVTVCLEVBQWdCLFdBRTlCaEssRUFBT0QsUUFBVSxTQUFVMlIsR0FDekIsSUFBSUMsRUFBY2hFLEVBQVcrRCxHQUN6QjlRLEVBQWlCMkYsRUFBcUI3QixFQUV0Q0wsR0FBZXNOLElBQWdCQSxFQUFZL0YsSUFDN0NoTCxFQUFlK1EsRUFBYS9GLEVBQVMsQ0FDbkMzRCxjQUFjLEVBQ2RuSCxJQUFLLFdBQWMsT0FBTzhHLFUsZ0JDZmhDLElBQUlvQyxFQUFrQixFQUFRLEdBQzFCNEgsRUFBWSxFQUFRLElBRXBCQyxFQUFXN0gsRUFBZ0IsWUFDM0I4SCxFQUFpQmxJLE1BQU0vSCxVQUczQjdCLEVBQU9ELFFBQVUsU0FBVW1ELEdBQ3pCLFlBQWNpRCxJQUFQakQsSUFBcUIwTyxFQUFVaEksUUFBVTFHLEdBQU00TyxFQUFlRCxLQUFjM08sSyxnQkNSckYsSUFBSXlHLEVBQVUsRUFBUSxJQUNsQmlJLEVBQVksRUFBUSxJQUdwQkMsRUFGa0IsRUFBUSxFQUVmN0gsQ0FBZ0IsWUFFL0JoSyxFQUFPRCxRQUFVLFNBQVVtRCxHQUN6QixHQUFVaUQsTUFBTmpELEVBQWlCLE9BQU9BLEVBQUcyTyxJQUMxQjNPLEVBQUcsZUFDSDBPLEVBQVVqSSxFQUFRekcsTSxnQkNUekIsSUFBSXFCLEVBQVcsRUFBUSxHQUd2QnZFLEVBQU9ELFFBQVUsU0FBVWdQLEVBQVUxRyxFQUFJbkgsRUFBTzZRLEdBQzlDLElBQ0UsT0FBT0EsRUFBVTFKLEVBQUc5RCxFQUFTckQsR0FBTyxHQUFJQSxFQUFNLElBQU1tSCxFQUFHbkgsR0FFdkQsTUFBT2lELEdBQ1AsSUFBSTZOLEVBQWVqRCxFQUFpQixPQUVwQyxXQURxQjVJLElBQWpCNkwsR0FBNEJ6TixFQUFTeU4sRUFBYTVSLEtBQUsyTyxJQUNyRDVLLEssZ0JDVlYsSUFFSTBOLEVBRmtCLEVBQVEsRUFFZjdILENBQWdCLFlBQzNCaUksR0FBZSxFQUVuQixJQUNFLElBQUlDLEVBQVMsRUFDVEMsRUFBcUIsQ0FDdkJDLEtBQU0sV0FDSixNQUFPLENBQUVDLE9BQVFILE1BRW5CLE9BQVUsV0FDUkQsR0FBZSxJQUduQkUsRUFBbUJOLEdBQVksV0FDN0IsT0FBT2pLLE1BR1RnQyxNQUFNMEksS0FBS0gsR0FBb0IsV0FBYyxNQUFNLEtBQ25ELE1BQU9oTyxJQUVUbkUsRUFBT0QsUUFBVSxTQUFVbUUsRUFBTXFPLEdBQy9CLElBQUtBLElBQWlCTixFQUFjLE9BQU8sRUFDM0MsSUFBSU8sR0FBb0IsRUFDeEIsSUFDRSxJQUFJN1EsRUFBUyxHQUNiQSxFQUFPa1EsR0FBWSxXQUNqQixNQUFPLENBQ0xPLEtBQU0sV0FDSixNQUFPLENBQUVDLEtBQU1HLEdBQW9CLE1BSXpDdE8sRUFBS3ZDLEdBQ0wsTUFBT3dDLElBQ1QsT0FBT3FPLEkscUNDcENULElBbURJQyxFQW5EQWxPLEVBQVcsRUFBUSxHQUNuQm1PLEVBQW1CLEVBQVEsSUFDM0IxQixFQUFjLEVBQVEsSUFDdEJwSSxFQUFhLEVBQVEsSUFDckIrSixFQUFPLEVBQVEsSUFDZkMsRUFBd0IsRUFBUSxJQUNoQ2pLLEVBQVksRUFBUSxJQU1wQmtLLEVBQVdsSyxFQUFVLFlBRXJCbUssRUFBbUIsYUFFbkJDLEVBQVksU0FBVUMsR0FDeEIsTUFBT0MsV0FBbUJELEVBQW5CQyxjQW1DTEMsRUFBa0IsV0FDcEIsSUFFRVQsRUFBa0JyUSxTQUFTK1EsUUFBVSxJQUFJQyxjQUFjLFlBQ3ZELE1BQU9qUCxJQTFCb0IsSUFJekJrUCxFQUZBQyxFQXlCSkosRUFBa0JULEVBcENZLFNBQVVBLEdBQ3hDQSxFQUFnQmMsTUFBTVIsRUFBVSxLQUNoQ04sRUFBZ0JlLFFBQ2hCLElBQUlDLEVBQU9oQixFQUFnQmlCLGFBQWEvUyxPQUV4QyxPQURBOFIsRUFBa0IsS0FDWGdCLEVBK0I2QkUsQ0FBMEJsQixLQXpCMURhLEVBQVNWLEVBQXNCLFdBRzVCZ0IsTUFBTUMsUUFBVSxPQUN2QmxCLEVBQUttQixZQUFZUixHQUVqQkEsRUFBT1MsSUFBTS9PLE9BTEosZ0JBTVRxTyxFQUFpQkMsRUFBT1UsY0FBYzVSLFVBQ3ZCNlIsT0FDZlosRUFBZUUsTUFBTVIsRUFBVSxzQkFDL0JNLEVBQWVHLFFBQ1JILEVBQWVhLEdBZ0J0QixJQURBLElBQUlqTixFQUFTK0osRUFBWS9KLE9BQ2xCQSxZQUFpQmlNLEVBQXlCLFVBQUVsQyxFQUFZL0osSUFDL0QsT0FBT2lNLEtBR1R0SyxFQUFXaUssSUFBWSxFQUl2QjdTLEVBQU9ELFFBQVVZLE9BQU9ZLFFBQVUsU0FBZ0JvRCxFQUFHd1AsR0FDbkQsSUFBSTFILEVBUUosT0FQVSxPQUFOOUgsR0FDRm1PLEVBQTBCLFVBQUl2TyxFQUFTSSxHQUN2QzhILEVBQVMsSUFBSXFHLEVBQ2JBLEVBQTBCLFVBQUksS0FFOUJyRyxFQUFPb0csR0FBWWxPLEdBQ2Q4SCxFQUFTeUcsU0FDTS9NLElBQWZnTyxFQUEyQjFILEVBQVNpRyxFQUFpQmpHLEVBQVEwSCxLLGdCQzVFdEUsSUFBSW5LLEVBQWtCLEVBQVEsR0FFOUJqSyxFQUFRMkUsRUFBSXNGLEcsZ0JDRlosSUFBSTNGLEVBQWMsRUFBUSxHQUN0QnpELEVBQWlCLEVBQVEsR0FBdUM4RCxFQUVoRTBQLEVBQW9CM1EsU0FBUzVCLFVBQzdCd1MsRUFBNEJELEVBQWtCM04sU0FDOUM2TixFQUFTLHdCQUtUalEsS0FKTyxTQUlrQitQLElBQzNCeFQsRUFBZXdULEVBTE4sT0FLK0IsQ0FDdENuTSxjQUFjLEVBQ2RuSCxJQUFLLFdBQ0gsSUFDRSxPQUFPdVQsRUFBMEJqVSxLQUFLd0gsTUFBTTBELE1BQU1nSixHQUFRLEdBQzFELE1BQU9uUSxHQUNQLE1BQU8sUSw2QkNoQmYsSUFBSUMsRUFBUSxFQUFRLEdBRXBCcEUsRUFBT0QsUUFBVSxTQUFVOEwsRUFBYTlELEdBQ3RDLElBQUloQixFQUFTLEdBQUc4RSxHQUNoQixRQUFTOUUsR0FBVTNDLEdBQU0sV0FFdkIyQyxFQUFPM0csS0FBSyxLQUFNMkgsR0FBWSxXQUFjLE1BQU0sR0FBTSxRLDZCQ041RCxJQUFJK0YsRUFBSSxFQUFRLEdBQ1p5RyxFQUFPLEVBQVEsSUFBZ0NwRSxJQUMvQ2hDLEVBQStCLEVBQVEsSUFDdkNxRyxFQUEwQixFQUFRLElBRWxDQyxFQUFzQnRHLEVBQTZCLE9BRW5EdUcsRUFBaUJGLEVBQXdCLE9BSzdDMUcsRUFBRSxDQUFFckksT0FBUSxRQUFTZ0osT0FBTyxFQUFNdkksUUFBU3VPLElBQXdCQyxHQUFrQixDQUNuRnZFLElBQUssU0FBYUosR0FDaEIsT0FBT3dFLEVBQUszTSxLQUFNbUksRUFBWS9JLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxRQUFLYixPLG9CQ2Z4RSxJQUFJUSxFQUFPLEVBQVEsSUFDZmhELEVBQU0sRUFBUSxHQUNkZ1IsRUFBK0IsRUFBUSxJQUN2Qy9ULEVBQWlCLEVBQVEsR0FBdUM4RCxFQUVwRTFFLEVBQU9ELFFBQVUsU0FBVTZVLEdBQ3pCLElBQUk1VCxFQUFTMkYsRUFBSzNGLFNBQVcyRixFQUFLM0YsT0FBUyxJQUN0QzJDLEVBQUkzQyxFQUFRNFQsSUFBT2hVLEVBQWVJLEVBQVE0VCxFQUFNLENBQ25EMVQsTUFBT3lULEVBQTZCalEsRUFBRWtRLE8sNkJDUDFDLElBQUlyUSxFQUFXLEVBQVEsR0FJdkJ2RSxFQUFPRCxRQUFVLFdBQ2YsSUFBSW1MLEVBQU8zRyxFQUFTcUQsTUFDaEI2RSxFQUFTLEdBT2IsT0FOSXZCLEVBQUsxSCxTQUFRaUosR0FBVSxLQUN2QnZCLEVBQUsySixhQUFZcEksR0FBVSxLQUMzQnZCLEVBQUs0SixZQUFXckksR0FBVSxLQUMxQnZCLEVBQUs2SixTQUFRdEksR0FBVSxLQUN2QnZCLEVBQUs4SixVQUFTdkksR0FBVSxLQUN4QnZCLEVBQUsrSixTQUFReEksR0FBVSxLQUNwQkEsSSxtQ0NiVCxJQUFJcUIsRUFBSSxFQUFRLEdBQ1p0SyxFQUFTLEVBQVEsR0FDakJtSyxFQUFhLEVBQVEsSUFDckIxRCxFQUFVLEVBQVEsSUFDbEI1RixFQUFjLEVBQVEsR0FDdEJSLEVBQWdCLEVBQVEsSUFDeEJDLEVBQW9CLEVBQVEsSUFDNUJNLEVBQVEsRUFBUSxHQUNoQlQsRUFBTSxFQUFRLEdBQ2RrRyxFQUFVLEVBQVEsSUFDbEI5RSxFQUFXLEVBQVEsR0FDbkJSLEVBQVcsRUFBUSxHQUNuQndKLEVBQVcsRUFBUSxJQUNuQnRFLEVBQWtCLEVBQVEsSUFDMUJqRixFQUFjLEVBQVEsSUFDdEJnQyxFQUEyQixFQUFRLElBQ25DME8sRUFBcUIsRUFBUSxJQUM3QkMsRUFBYSxFQUFRLElBQ3JCaEUsRUFBNEIsRUFBUSxJQUNwQ2lFLEVBQThCLEVBQVEsSUFDdENoRSxFQUE4QixFQUFRLElBQ3RDbkMsRUFBaUMsRUFBUSxJQUN6QzFJLEVBQXVCLEVBQVEsR0FDL0JpRCxFQUE2QixFQUFRLElBQ3JDdEUsRUFBOEIsRUFBUSxJQUN0Q0MsRUFBVyxFQUFRLElBQ25CekIsRUFBUyxFQUFRLElBQ2pCaUYsRUFBWSxFQUFRLElBQ3BCQyxFQUFhLEVBQVEsSUFDckJoRixFQUFNLEVBQVEsSUFDZG9HLEVBQWtCLEVBQVEsR0FDMUIySyxFQUErQixFQUFRLElBQ3ZDVSxFQUF3QixFQUFRLElBQ2hDQyxFQUFpQixFQUFRLElBQ3pCbk8sRUFBc0IsRUFBUSxJQUM5Qm9PLEVBQVcsRUFBUSxJQUFnQ3JGLFFBRW5Ec0YsRUFBUzdNLEVBQVUsVUFHbkI4TSxFQUFlekwsRUFBZ0IsZUFDL0IwTCxFQUFtQnZPLEVBQW9CcUIsSUFDdkNwQixFQUFtQkQsRUFBb0JpQyxVQUo5QixVQUtUdU0sRUFBa0JoVixPQUFnQixVQUNsQ2lWLEVBQVVwUyxFQUFPeEMsT0FDakI2VSxFQUFhbEksRUFBVyxPQUFRLGFBQ2hDakUsRUFBaUN1RixFQUErQnZLLEVBQ2hFRCxFQUF1QjhCLEVBQXFCN0IsRUFDNUNvUixFQUE0QlYsRUFBNEIxUSxFQUN4RGtJLEVBQTZCcEQsRUFBMkI5RSxFQUN4RHFSLEVBQWFyUyxFQUFPLFdBQ3BCc1MsRUFBeUJ0UyxFQUFPLGNBQ2hDdVMsRUFBeUJ2UyxFQUFPLDZCQUNoQ3dTLEVBQXlCeFMsRUFBTyw2QkFDaENLLEdBQXdCTCxFQUFPLE9BQy9CeVMsR0FBVTNTLEVBQU8yUyxRQUVqQkMsSUFBY0QsS0FBWUEsR0FBaUIsWUFBTUEsR0FBaUIsVUFBRUUsVUFHcEVDLEdBQXNCalMsR0FBZUQsR0FBTSxXQUM3QyxPQUVTLEdBRkY4USxFQUFtQnpRLEVBQXFCLEdBQUksSUFBSyxDQUN0RDNELElBQUssV0FBYyxPQUFPMkQsRUFBcUJtRCxLQUFNLElBQUssQ0FBRTFHLE1BQU8sSUFBS2lLLE1BQ3RFQSxLQUNELFNBQVV4RyxFQUFHQyxFQUFHQyxHQUNuQixJQUFJMFIsRUFBNEI3TSxFQUErQmlNLEVBQWlCL1EsR0FDNUUyUixVQUFrQ1osRUFBZ0IvUSxHQUN0REgsRUFBcUJFLEVBQUdDLEVBQUdDLEdBQ3ZCMFIsR0FBNkI1UixJQUFNZ1IsR0FDckNsUixFQUFxQmtSLEVBQWlCL1EsRUFBRzJSLElBRXpDOVIsRUFFQStSLEdBQU8sU0FBVWhLLEVBQUtpSyxHQUN4QixJQUFJQyxFQUFTWCxFQUFXdkosR0FBTzBJLEVBQW1CVSxFQUFpQixXQU9uRSxPQU5BRixFQUFpQmdCLEVBQVEsQ0FDdkJuTixLQXRDUyxTQXVDVGlELElBQUtBLEVBQ0xpSyxZQUFhQSxJQUVWcFMsSUFBYXFTLEVBQU9ELFlBQWNBLEdBQ2hDQyxHQUdMQyxHQUFXN1MsRUFBb0IsU0FBVVosR0FDM0MsTUFBb0IsaUJBQU5BLEdBQ1osU0FBVUEsR0FDWixPQUFPdkMsT0FBT3VDLGFBQWUwUyxHQUczQmdCLEdBQWtCLFNBQXdCalMsRUFBR0MsRUFBR0MsR0FDOUNGLElBQU1nUixHQUFpQmlCLEdBQWdCWixFQUF3QnBSLEVBQUdDLEdBQ3RFTixFQUFTSSxHQUNULElBQUluRCxFQUFNZ0QsRUFBWUksR0FBRyxHQUV6QixPQURBTCxFQUFTTSxHQUNMbEIsRUFBSW9TLEVBQVl2VSxJQUNicUQsRUFBV2hFLFlBSVY4QyxFQUFJZ0IsRUFBRzZRLElBQVc3USxFQUFFNlEsR0FBUWhVLEtBQU1tRCxFQUFFNlEsR0FBUWhVLElBQU8sR0FDdkRxRCxFQUFhcVEsRUFBbUJyUSxFQUFZLENBQUVoRSxXQUFZMkYsRUFBeUIsR0FBRyxPQUpqRjdDLEVBQUlnQixFQUFHNlEsSUFBUy9RLEVBQXFCRSxFQUFHNlEsRUFBUWhQLEVBQXlCLEVBQUcsS0FDakY3QixFQUFFNlEsR0FBUWhVLElBQU8sR0FJVjhVLEdBQW9CM1IsRUFBR25ELEVBQUtxRCxJQUM5QkosRUFBcUJFLEVBQUduRCxFQUFLcUQsSUFHcENnUyxHQUFvQixTQUEwQmxTLEVBQUd3UCxHQUNuRDVQLEVBQVNJLEdBQ1QsSUFBSW1TLEVBQWFyTixFQUFnQjBLLEdBQzdCekosRUFBT3lLLEVBQVcyQixHQUFZak0sT0FBT2tNLEdBQXVCRCxJQUloRSxPQUhBdkIsRUFBUzdLLEdBQU0sU0FBVWxKLEdBQ2xCNkMsSUFBZTJTLEdBQXNCNVcsS0FBSzBXLEVBQVl0VixJQUFNb1YsR0FBZ0JqUyxFQUFHbkQsRUFBS3NWLEVBQVd0VixPQUUvRm1ELEdBT0xxUyxHQUF3QixTQUE4QmpLLEdBQ3hELElBQUluSSxFQUFJSixFQUFZdUksR0FBRyxHQUNuQmxNLEVBQWErTCxFQUEyQnhNLEtBQUt3SCxLQUFNaEQsR0FDdkQsUUFBSWdELE9BQVMrTixHQUFtQmhTLEVBQUlvUyxFQUFZblIsS0FBT2pCLEVBQUlxUyxFQUF3QnBSLFFBQzVFL0QsSUFBZThDLEVBQUlpRSxLQUFNaEQsS0FBT2pCLEVBQUlvUyxFQUFZblIsSUFBTWpCLEVBQUlpRSxLQUFNNE4sSUFBVzVOLEtBQUs0TixHQUFRNVEsS0FBSy9ELElBR2xHb1csR0FBNEIsU0FBa0N0UyxFQUFHQyxHQUNuRSxJQUFJMUIsRUFBS3VHLEVBQWdCOUUsR0FDckJuRCxFQUFNZ0QsRUFBWUksR0FBRyxHQUN6QixHQUFJMUIsSUFBT3lTLElBQW1CaFMsRUFBSW9TLEVBQVl2VSxJQUFTbUMsRUFBSXFTLEVBQXdCeFUsR0FBbkYsQ0FDQSxJQUFJb0UsRUFBYThELEVBQStCeEcsRUFBSTFCLEdBSXBELE9BSElvRSxJQUFjakMsRUFBSW9TLEVBQVl2VSxJQUFVbUMsRUFBSVQsRUFBSXNTLElBQVd0UyxFQUFHc1MsR0FBUWhVLEtBQ3hFb0UsRUFBVy9FLFlBQWEsR0FFbkIrRSxJQUdMc1IsR0FBdUIsU0FBNkJ2UyxHQUN0RCxJQUFJd0ssRUFBUTJHLEVBQTBCck0sRUFBZ0I5RSxJQUNsRDhILEVBQVMsR0FJYixPQUhBOEksRUFBU3BHLEdBQU8sU0FBVTNOLEdBQ25CbUMsRUFBSW9TLEVBQVl2VSxJQUFTbUMsRUFBSWlGLEVBQVlwSCxJQUFNaUwsRUFBT3ZDLEtBQUsxSSxNQUUzRGlMLEdBR0xzSyxHQUF5QixTQUErQnBTLEdBQzFELElBQUl3UyxFQUFzQnhTLElBQU1nUixFQUM1QnhHLEVBQVEyRyxFQUEwQnFCLEVBQXNCbkIsRUFBeUJ2TSxFQUFnQjlFLElBQ2pHOEgsRUFBUyxHQU1iLE9BTEE4SSxFQUFTcEcsR0FBTyxTQUFVM04sSUFDcEJtQyxFQUFJb1MsRUFBWXZVLElBQVUyVixJQUF1QnhULEVBQUlnUyxFQUFpQm5VLElBQ3hFaUwsRUFBT3ZDLEtBQUs2TCxFQUFXdlUsT0FHcEJpTCxJQUtKNUksSUFjSHNCLEdBYkF5USxFQUFVLFdBQ1IsR0FBSWhPLGdCQUFnQmdPLEVBQVMsTUFBTTlRLFVBQVUsK0JBQzdDLElBQUkyUixFQUFlelAsVUFBVUMsYUFBMkJkLElBQWpCYSxVQUFVLEdBQStCaEMsT0FBT2dDLFVBQVUsU0FBN0JiLEVBQ2hFcUcsRUFBTTVJLEVBQUk2UyxHQUNWVyxFQUFTLFNBQVVsVyxHQUNqQjBHLE9BQVMrTixHQUFpQnlCLEVBQU9oWCxLQUFLNFYsRUFBd0I5VSxHQUM5RHlDLEVBQUlpRSxLQUFNNE4sSUFBVzdSLEVBQUlpRSxLQUFLNE4sR0FBU2hKLEtBQU01RSxLQUFLNE4sR0FBUWhKLElBQU8sR0FDckU4SixHQUFvQjFPLEtBQU00RSxFQUFLaEcsRUFBeUIsRUFBR3RGLEtBRzdELE9BREltRCxHQUFlK1IsSUFBWUUsR0FBb0JYLEVBQWlCbkosRUFBSyxDQUFFdkUsY0FBYyxFQUFNTyxJQUFLNE8sSUFDN0ZaLEdBQUtoSyxFQUFLaUssS0FHTyxVQUFHLFlBQVksV0FDdkMsT0FBT3JQLEVBQWlCUSxNQUFNNEUsT0FHaENySCxFQUFTeVEsRUFBUyxpQkFBaUIsU0FBVWEsR0FDM0MsT0FBT0QsR0FBSzVTLEVBQUk2UyxHQUFjQSxNQUdoQ2pOLEVBQTJCOUUsRUFBSXNTLEdBQy9CelEsRUFBcUI3QixFQUFJa1MsR0FDekIzSCxFQUErQnZLLEVBQUl1UyxHQUNuQzlGLEVBQTBCek0sRUFBSTBRLEVBQTRCMVEsRUFBSXdTLEdBQzlEOUYsRUFBNEIxTSxFQUFJcVMsR0FFaENwQyxFQUE2QmpRLEVBQUksU0FBVWxFLEdBQ3pDLE9BQU9nVyxHQUFLeE0sRUFBZ0J4SixHQUFPQSxJQUdqQzZELElBRUZJLEVBQXFCbVIsRUFBaUIsVUFBRyxjQUFlLENBQ3REM04sY0FBYyxFQUNkbkgsSUFBSyxXQUNILE9BQU9zRyxFQUFpQlEsTUFBTTZPLGVBRzdCeE0sR0FDSDlFLEVBQVN3USxFQUFpQix1QkFBd0JxQixHQUF1QixDQUFFdlAsUUFBUSxNQUt6RnFHLEVBQUUsQ0FBRXRLLFFBQVEsRUFBTWdULE1BQU0sRUFBTXRRLFFBQVNyQyxFQUFldUMsTUFBT3ZDLEdBQWlCLENBQzVFN0MsT0FBUTRVLElBR1ZMLEVBQVNKLEVBQVdwUixLQUF3QixTQUFVdkQsR0FDcEQ2VSxFQUFzQjdVLE1BR3hCc04sRUFBRSxDQUFFckksT0FqTFMsU0FpTE9PLE1BQU0sRUFBTUUsUUFBU3JDLEdBQWlCLENBR3hELElBQU8sU0FBVXJDLEdBQ2YsSUFBSStMLEVBQVN2SSxPQUFPeEQsR0FDcEIsR0FBSW1DLEVBQUlzUyxFQUF3QjFJLEdBQVMsT0FBTzBJLEVBQXVCMUksR0FDdkUsSUFBSW1KLEVBQVNkLEVBQVFySSxHQUdyQixPQUZBMEksRUFBdUIxSSxHQUFVbUosRUFDakNSLEVBQXVCUSxHQUFVbkosRUFDMUJtSixHQUlUVyxPQUFRLFNBQWdCQyxHQUN0QixJQUFLWCxHQUFTVyxHQUFNLE1BQU14UyxVQUFVd1MsRUFBTSxvQkFDMUMsR0FBSTNULEVBQUl1UyxFQUF3Qm9CLEdBQU0sT0FBT3BCLEVBQXVCb0IsSUFFdEVDLFVBQVcsV0FBY25CLElBQWEsR0FDdENvQixVQUFXLFdBQWNwQixJQUFhLEtBR3hDdEksRUFBRSxDQUFFckksT0FBUSxTQUFVTyxNQUFNLEVBQU1FLFFBQVNyQyxFQUFldUMsTUFBTy9CLEdBQWUsQ0FHOUU5QyxPQTNIWSxTQUFnQm9ELEVBQUd3UCxHQUMvQixZQUFzQmhPLElBQWZnTyxFQUEyQmUsRUFBbUJ2USxHQUFLa1MsR0FBa0IzQixFQUFtQnZRLEdBQUl3UCxJQTZIbkd2VCxlQUFnQmdXLEdBR2hCbEUsaUJBQWtCbUUsR0FHbEI1Uix5QkFBMEJnUyxLQUc1Qm5KLEVBQUUsQ0FBRXJJLE9BQVEsU0FBVU8sTUFBTSxFQUFNRSxRQUFTckMsR0FBaUIsQ0FHMURpSCxvQkFBcUJvTSxHQUdyQjFNLHNCQUF1QnVNLEtBS3pCakosRUFBRSxDQUFFckksT0FBUSxTQUFVTyxNQUFNLEVBQU1FLE9BQVE5QixHQUFNLFdBQWNnTixFQUE0QjFNLEVBQUUsT0FBVSxDQUNwRzhGLHNCQUF1QixTQUErQnRILEdBQ3BELE9BQU9rTyxFQUE0QjFNLEVBQUVxSixFQUFTN0ssT0FNOUMyUyxJQVdGL0gsRUFBRSxDQUFFckksT0FBUSxPQUFRTyxNQUFNLEVBQU1FLFFBVkhyQyxHQUFpQk8sR0FBTSxXQUNsRCxJQUFJc1MsRUFBU2QsSUFFYixNQUErQixVQUF4QkMsRUFBVyxDQUFDYSxLQUVlLE1BQTdCYixFQUFXLENBQUUxSyxFQUFHdUwsS0FFYyxNQUE5QmIsRUFBV2xWLE9BQU8rVixRQUd3QyxDQUUvRGUsVUFBVyxTQUFtQnZVLEVBQUl3VSxFQUFVQyxHQUkxQyxJQUhBLElBRUlDLEVBRkFDLEVBQU8sQ0FBQzNVLEdBQ1JtTSxFQUFRLEVBRUxySSxVQUFVQyxPQUFTb0ksR0FBT3dJLEVBQUszTixLQUFLbEQsVUFBVXFJLE1BRXJELEdBREF1SSxFQUFZRixHQUNQM1MsRUFBUzJTLFNBQW9CdlIsSUFBUGpELEtBQW9CeVQsR0FBU3pULEdBTXhELE9BTEsyRyxFQUFRNk4sS0FBV0EsRUFBVyxTQUFVbFcsRUFBS04sR0FFaEQsR0FEd0IsbUJBQWIwVyxJQUF5QjFXLEVBQVEwVyxFQUFVeFgsS0FBS3dILEtBQU1wRyxFQUFLTixLQUNqRXlWLEdBQVN6VixHQUFRLE9BQU9BLElBRS9CMlcsRUFBSyxHQUFLSCxFQUNIN0IsRUFBV3hLLE1BQU0sS0FBTXdNLE1BTy9CakMsRUFBaUIsVUFBRUgsSUFDdEJ2USxFQUE0QjBRLEVBQWlCLFVBQUdILEVBQWNHLEVBQWlCLFVBQUVyTixTQUluRitNLEVBQWVNLEVBN1FGLFVBK1FiaE4sRUFBVzRNLElBQVUsRyxnQkN0VHJCLElBQUluUixFQUFjLEVBQVEsR0FDdEJrQyxFQUF1QixFQUFRLEdBQy9CaEMsRUFBVyxFQUFRLEdBQ25CNFEsRUFBYSxFQUFRLElBSXpCblYsRUFBT0QsUUFBVXNFLEVBQWMxRCxPQUFPK1IsaUJBQW1CLFNBQTBCL04sRUFBR3dQLEdBQ3BGNVAsRUFBU0ksR0FLVCxJQUpBLElBR0luRCxFQUhBa0osRUFBT3lLLEVBQVdoQixHQUNsQmxOLEVBQVN5RCxFQUFLekQsT0FDZG9JLEVBQVEsRUFFTHBJLEVBQVNvSSxHQUFPOUksRUFBcUI3QixFQUFFQyxFQUFHbkQsRUFBTWtKLEVBQUsyRSxLQUFVOEUsRUFBVzNTLElBQ2pGLE9BQU9tRCxJLGdCQ2RULElBQUk4RSxFQUFrQixFQUFRLElBQzFCcU0sRUFBNEIsRUFBUSxJQUE4Q3BSLEVBRWxGK0IsRUFBVyxHQUFHQSxTQUVkcVIsRUFBK0IsaUJBQVZ4VSxRQUFzQkEsUUFBVTNDLE9BQU9tSyxvQkFDNURuSyxPQUFPbUssb0JBQW9CeEgsUUFBVSxHQVd6Q3RELEVBQU9ELFFBQVEyRSxFQUFJLFNBQTZCeEIsR0FDOUMsT0FBTzRVLEdBQW9DLG1CQUFyQnJSLEVBQVNyRyxLQUFLOEMsR0FWakIsU0FBVUEsR0FDN0IsSUFDRSxPQUFPNFMsRUFBMEI1UyxHQUNqQyxNQUFPaUIsR0FDUCxPQUFPMlQsRUFBWXBSLFNBT2pCcVIsQ0FBZTdVLEdBQ2Y0UyxFQUEwQnJNLEVBQWdCdkcsTSw2QkNqQmhELElBQUk0SyxFQUFJLEVBQVEsR0FDWnpKLEVBQWMsRUFBUSxHQUN0QmIsRUFBUyxFQUFRLEdBQ2pCRyxFQUFNLEVBQVEsR0FDZG9CLEVBQVcsRUFBUSxHQUNuQm5FLEVBQWlCLEVBQVEsR0FBdUM4RCxFQUNoRVcsRUFBNEIsRUFBUSxJQUVwQzJTLEVBQWV4VSxFQUFPeEMsT0FFMUIsR0FBSXFELEdBQXNDLG1CQUFoQjJULE1BQWlDLGdCQUFpQkEsRUFBYW5XLGlCQUV4RHNFLElBQS9CNlIsSUFBZXZCLGFBQ2QsQ0FDRCxJQUFJd0IsRUFBOEIsR0FFOUJDLEVBQWdCLFdBQ2xCLElBQUl6QixFQUFjelAsVUFBVUMsT0FBUyxRQUFzQmQsSUFBakJhLFVBQVUsUUFBbUJiLEVBQVluQixPQUFPZ0MsVUFBVSxJQUNoR3lGLEVBQVM3RSxnQkFBZ0JzUSxFQUN6QixJQUFJRixFQUFhdkIsUUFFRHRRLElBQWhCc1EsRUFBNEJ1QixJQUFpQkEsRUFBYXZCLEdBRTlELE1BRG9CLEtBQWhCQSxJQUFvQndCLEVBQTRCeEwsSUFBVSxHQUN2REEsR0FFVHBILEVBQTBCNlMsRUFBZUYsR0FDekMsSUFBSUcsRUFBa0JELEVBQWNyVyxVQUFZbVcsRUFBYW5XLFVBQzdEc1csRUFBZ0JwTSxZQUFjbU0sRUFFOUIsSUFBSUUsRUFBaUJELEVBQWdCMVIsU0FDakM0UixFQUF5QyxnQkFBaENyVCxPQUFPZ1QsRUFBYSxTQUM3Qk0sRUFBUyx3QkFDYjFYLEVBQWV1WCxFQUFpQixjQUFlLENBQzdDbFEsY0FBYyxFQUNkbkgsSUFBSyxXQUNILElBQUk0VixFQUFTM1IsRUFBUzZDLE1BQVFBLEtBQUtXLFVBQVlYLEtBQzNDMkYsRUFBUzZLLEVBQWVoWSxLQUFLc1csR0FDakMsR0FBSS9TLEVBQUlzVSxFQUE2QnZCLEdBQVMsTUFBTyxHQUNyRCxJQUFJNkIsRUFBT0YsRUFBUzlLLEVBQU83RyxNQUFNLEdBQUksR0FBSzZHLEVBQU9DLFFBQVE4SyxFQUFRLE1BQ2pFLE1BQWdCLEtBQVRDLE9BQWNwUyxFQUFZb1MsS0FJckN6SyxFQUFFLENBQUV0SyxRQUFRLEVBQU0wQyxRQUFRLEdBQVEsQ0FDaENsRixPQUFRa1gsTSw4QkM5Q1osSUFBSXBLLEVBQUksRUFBUSxHQUNaL0ksRUFBVyxFQUFRLEdBQ25COEUsRUFBVSxFQUFRLElBQ2xCd0gsRUFBa0IsRUFBUSxJQUMxQnJELEVBQVcsRUFBUSxJQUNuQnZFLEVBQWtCLEVBQVEsSUFDMUJ3RSxFQUFpQixFQUFRLElBQ3pCakUsRUFBa0IsRUFBUSxHQUMxQm1FLEVBQStCLEVBQVEsSUFDdkNxRyxFQUEwQixFQUFRLElBRWxDQyxFQUFzQnRHLEVBQTZCLFNBQ25EdUcsRUFBaUJGLEVBQXdCLFFBQVMsQ0FBRTdELFdBQVcsRUFBTTZILEVBQUcsRUFBRzFMLEVBQUcsSUFFOUVsQixFQUFVNUIsRUFBZ0IsV0FDMUJ5TyxFQUFjLEdBQUcvUixNQUNqQjBJLEVBQU1qTSxLQUFLaU0sSUFLZnRCLEVBQUUsQ0FBRXJJLE9BQVEsUUFBU2dKLE9BQU8sRUFBTXZJLFFBQVN1TyxJQUF3QkMsR0FBa0IsQ0FDbkZoTyxNQUFPLFNBQWVnUyxFQUFPQyxHQUMzQixJQUtJaEgsRUFBYWxGLEVBQVEvSyxFQUxyQmlELEVBQUk4RSxFQUFnQjdCLE1BQ3BCWCxFQUFTK0csRUFBU3JKLEVBQUVzQyxRQUNwQnlILEVBQUkyQyxFQUFnQnFILEVBQU96UixHQUMzQjJSLEVBQU12SCxPQUF3QmxMLElBQVJ3UyxFQUFvQjFSLEVBQVMwUixFQUFLMVIsR0FHNUQsR0FBSTRDLEVBQVFsRixLQUdnQixtQkFGMUJnTixFQUFjaE4sRUFBRW9ILGNBRXlCNEYsSUFBZ0IvSCxRQUFTQyxFQUFROEgsRUFBWTlQLFdBRTNFa0QsRUFBUzRNLElBRUUsUUFEcEJBLEVBQWNBLEVBQVkvRixNQUNBK0YsT0FBY3hMLEdBSHhDd0wsT0FBY3hMLEVBS1p3TCxJQUFnQi9ILFlBQXlCekQsSUFBaEJ3TCxHQUMzQixPQUFPOEcsRUFBWXJZLEtBQUt1RSxFQUFHK0osRUFBR2tLLEdBSWxDLElBREFuTSxFQUFTLFNBQXFCdEcsSUFBaEJ3TCxFQUE0Qi9ILE1BQVErSCxHQUFhdkMsRUFBSXdKLEVBQU1sSyxFQUFHLElBQ3ZFaE4sRUFBSSxFQUFHZ04sRUFBSWtLLEVBQUtsSyxJQUFLaE4sSUFBU2dOLEtBQUsvSixHQUFHc0osRUFBZXhCLEVBQVEvSyxFQUFHaUQsRUFBRStKLElBRXZFLE9BREFqQyxFQUFPeEYsT0FBU3ZGLEVBQ1QrSyxNLDZCQzdDWCxJQUFJaEQsRUFBa0IsRUFBUSxJQUMxQm9QLEVBQW1CLEVBQVEsS0FDM0JqSCxFQUFZLEVBQVEsSUFDcEJ6SyxFQUFzQixFQUFRLElBQzlCMlIsRUFBaUIsRUFBUSxLQUd6QnBELEVBQW1Cdk8sRUFBb0JxQixJQUN2Q3BCLEVBQW1CRCxFQUFvQmlDLFVBRnRCLGtCQWNyQnBKLEVBQU9ELFFBQVUrWSxFQUFlbFAsTUFBTyxTQUFTLFNBQVVtUCxFQUFVQyxHQUNsRXRELEVBQWlCOU4sS0FBTSxDQUNyQjJCLEtBaEJpQixpQkFpQmpCOUQsT0FBUWdFLEVBQWdCc1AsR0FDeEIxSixNQUFPLEVBQ1AySixLQUFNQSxPQUlQLFdBQ0QsSUFBSTFQLEVBQVFsQyxFQUFpQlEsTUFDekJuQyxFQUFTNkQsRUFBTTdELE9BQ2Z1VCxFQUFPMVAsRUFBTTBQLEtBQ2IzSixFQUFRL0YsRUFBTStGLFFBQ2xCLE9BQUs1SixHQUFVNEosR0FBUzVKLEVBQU93QixRQUM3QnFDLEVBQU03RCxZQUFTVSxFQUNSLENBQUVqRixXQUFPaUYsRUFBV2tNLE1BQU0sSUFFdkIsUUFBUjJHLEVBQXVCLENBQUU5WCxNQUFPbU8sRUFBT2dELE1BQU0sR0FDckMsVUFBUjJHLEVBQXlCLENBQUU5WCxNQUFPdUUsRUFBTzRKLEdBQVFnRCxNQUFNLEdBQ3BELENBQUVuUixNQUFPLENBQUNtTyxFQUFPNUosRUFBTzRKLElBQVNnRCxNQUFNLEtBQzdDLFVBS0hULEVBQVVxSCxVQUFZckgsRUFBVWhJLE1BR2hDaVAsRUFBaUIsUUFDakJBLEVBQWlCLFVBQ2pCQSxFQUFpQixZLDZCQ25EakIsSUFBSS9LLEVBQUksRUFBUSxHQUNab0wsRUFBNEIsRUFBUSxLQUNwQ0MsRUFBaUIsRUFBUSxLQUN6QkMsRUFBaUIsRUFBUSxLQUN6QjlELEVBQWlCLEVBQVEsSUFDekJwUSxFQUE4QixFQUFRLElBQ3RDQyxFQUFXLEVBQVEsSUFDbkI2RSxFQUFrQixFQUFRLEdBQzFCQyxFQUFVLEVBQVEsSUFDbEIySCxFQUFZLEVBQVEsSUFDcEJ5SCxFQUFnQixFQUFRLEtBRXhCQyxFQUFvQkQsRUFBY0Msa0JBQ2xDQyxFQUF5QkYsRUFBY0UsdUJBQ3ZDMUgsRUFBVzdILEVBQWdCLFlBSzNCd1AsRUFBYSxXQUFjLE9BQU81UixNQUV0QzVILEVBQU9ELFFBQVUsU0FBVTBaLEVBQVU3RSxFQUFNOEUsRUFBcUJ0SCxFQUFNdUgsRUFBU0MsRUFBUUMsR0FDckZYLEVBQTBCUSxFQUFxQjlFLEVBQU14QyxHQUVyRCxJQWtCSTBILEVBQTBCQyxFQUFTQyxFQWxCbkNDLEVBQXFCLFNBQVVDLEdBQ2pDLEdBQUlBLElBQVNQLEdBQVdRLEVBQWlCLE9BQU9BLEVBQ2hELElBQUtaLEdBQTBCVyxLQUFRRSxFQUFtQixPQUFPQSxFQUFrQkYsR0FDbkYsT0FBUUEsR0FDTixJQWJLLE9BY0wsSUFiTyxTQWNQLElBYlEsVUFhTSxPQUFPLFdBQXFCLE9BQU8sSUFBSVIsRUFBb0I5UixLQUFNc1MsSUFDL0UsT0FBTyxXQUFjLE9BQU8sSUFBSVIsRUFBb0I5UixRQUdwRDBFLEVBQWdCc0ksRUFBTyxZQUN2QnlGLEdBQXdCLEVBQ3hCRCxFQUFvQlgsRUFBUzVYLFVBQzdCeVksRUFBaUJGLEVBQWtCdkksSUFDbEN1SSxFQUFrQixlQUNsQlQsR0FBV1MsRUFBa0JULEdBQzlCUSxHQUFtQlosR0FBMEJlLEdBQWtCTCxFQUFtQk4sR0FDbEZZLEVBQTRCLFNBQVIzRixHQUFrQndGLEVBQWtCSSxTQUE0QkYsRUFpQ3hGLEdBN0JJQyxJQUNGVCxFQUEyQlgsRUFBZW9CLEVBQWtCbmEsS0FBSyxJQUFJcVosSUFDakVILElBQXNCM1ksT0FBT2tCLFdBQWFpWSxFQUF5QjFILE9BQ2hFbkksR0FBV2tQLEVBQWVXLEtBQThCUixJQUN2REYsRUFDRkEsRUFBZVUsRUFBMEJSLEdBQ2EsbUJBQXRDUSxFQUF5QmpJLElBQ3pDM00sRUFBNEI0VSxFQUEwQmpJLEVBQVUySCxJQUlwRWxFLEVBQWV3RSxFQUEwQnhOLEdBQWUsR0FBTSxHQUMxRHJDLElBQVMySCxFQUFVdEYsR0FBaUJrTixLQXpDakMsVUE4Q1BHLEdBQXFCVyxHQTlDZCxXQThDZ0NBLEVBQWU5WixPQUN4RDZaLEdBQXdCLEVBQ3hCRixFQUFrQixXQUFvQixPQUFPRyxFQUFlbGEsS0FBS3dILFFBSTdEcUMsSUFBVzRQLEdBQVdPLEVBQWtCdkksS0FBY3NJLEdBQzFEalYsRUFBNEJrVixFQUFtQnZJLEVBQVVzSSxHQUUzRHZJLEVBQVVnRCxHQUFRdUYsRUFHZFIsRUFNRixHQUxBSSxFQUFVLENBQ1JVLE9BQVFSLEVBNURELFVBNkRQdlAsS0FBTWtQLEVBQVNPLEVBQWtCRixFQTlENUIsUUErRExPLFFBQVNQLEVBN0RELFlBK0ROSixFQUFRLElBQUtHLEtBQU9ELEdBQ2xCUixHQUEwQmMsS0FBMkJMLEtBQU9JLEtBQzlEalYsRUFBU2lWLEVBQW1CSixFQUFLRCxFQUFRQyxTQUV0Q2xNLEVBQUUsQ0FBRXJJLE9BQVFtUCxFQUFNbkcsT0FBTyxFQUFNdkksT0FBUXFULEdBQTBCYyxHQUF5Qk4sR0FHbkcsT0FBT0EsSSw2QkN2RlQsSUFBSVQsRUFBb0IsRUFBUSxLQUErQkEsa0JBQzNEL1gsRUFBUyxFQUFRLElBQ2pCaUYsRUFBMkIsRUFBUSxJQUNuQzhPLEVBQWlCLEVBQVEsSUFDekIxRCxFQUFZLEVBQVEsSUFFcEI0SCxFQUFhLFdBQWMsT0FBTzVSLE1BRXRDNUgsRUFBT0QsUUFBVSxTQUFVMlosRUFBcUI5RSxFQUFNeEMsR0FDcEQsSUFBSTlGLEVBQWdCc0ksRUFBTyxZQUkzQixPQUhBOEUsRUFBb0I3WCxVQUFZTixFQUFPK1gsRUFBbUIsQ0FBRWxILEtBQU01TCxFQUF5QixFQUFHNEwsS0FDOUZrRCxFQUFlb0UsRUFBcUJwTixHQUFlLEdBQU8sR0FDMURzRixFQUFVdEYsR0FBaUJrTixFQUNwQkUsSSw2QkNiVCxJQWFJSixFQUFtQm9CLEVBQW1DQyxFQWJ0RHhCLEVBQWlCLEVBQVEsS0FDekJqVSxFQUE4QixFQUFRLElBQ3RDdkIsRUFBTSxFQUFRLEdBQ2RxRyxFQUFrQixFQUFRLEdBQzFCQyxFQUFVLEVBQVEsSUFFbEI0SCxFQUFXN0gsRUFBZ0IsWUFDM0J1UCxHQUF5QixFQVF6QixHQUFHN08sT0FHQyxTQUZOaVEsRUFBZ0IsR0FBR2pRLFNBSWpCZ1EsRUFBb0N2QixFQUFlQSxFQUFld0IsT0FDeEJoYSxPQUFPa0IsWUFBV3lYLEVBQW9Cb0IsR0FIbERuQixHQUF5QixHQU9sQ3BULE1BQXJCbVQsSUFBZ0NBLEVBQW9CLElBR25EclAsR0FBWXRHLEVBQUkyVixFQUFtQnpILElBQ3RDM00sRUFBNEJvVSxFQUFtQnpILEdBcEJoQyxXQUFjLE9BQU9qSyxRQXVCdEM1SCxFQUFPRCxRQUFVLENBQ2Z1WixrQkFBbUJBLEVBQ25CQyx1QkFBd0JBLEksZ0JDbkMxQixJQUFJNVYsRUFBTSxFQUFRLEdBQ2RvSyxFQUFXLEVBQVEsSUFDbkJwRixFQUFZLEVBQVEsSUFDcEJpUyxFQUEyQixFQUFRLEtBRW5DL0gsRUFBV2xLLEVBQVUsWUFDckJnTixFQUFrQmhWLE9BQU9rQixVQUk3QjdCLEVBQU9ELFFBQVU2YSxFQUEyQmphLE9BQU93WSxlQUFpQixTQUFVeFUsR0FFNUUsT0FEQUEsRUFBSW9KLEVBQVNwSixHQUNUaEIsRUFBSWdCLEVBQUdrTyxHQUFrQmxPLEVBQUVrTyxHQUNILG1CQUFqQmxPLEVBQUVvSCxhQUE2QnBILGFBQWFBLEVBQUVvSCxZQUNoRHBILEVBQUVvSCxZQUFZbEssVUFDZDhDLGFBQWFoRSxPQUFTZ1YsRUFBa0IsTyxnQkNmbkQsSUFBSXBSLEVBQVcsRUFBUSxHQUNuQnNXLEVBQXFCLEVBQVEsS0FNakM3YSxFQUFPRCxRQUFVWSxPQUFPeVksaUJBQW1CLGFBQWUsR0FBSyxXQUM3RCxJQUVJaEMsRUFGQTBELEdBQWlCLEVBQ2pCL1EsRUFBTyxHQUVYLEtBQ0VxTixFQUFTelcsT0FBT3NFLHlCQUF5QnRFLE9BQU9rQixVQUFXLGFBQWEyRyxLQUNqRXBJLEtBQUsySixFQUFNLElBQ2xCK1EsRUFBaUIvUSxhQUFnQkgsTUFDakMsTUFBT3pGLElBQ1QsT0FBTyxTQUF3QlEsRUFBRzhKLEdBS2hDLE9BSkFsSyxFQUFTSSxHQUNUa1csRUFBbUJwTSxHQUNmcU0sRUFBZ0IxRCxFQUFPaFgsS0FBS3VFLEVBQUc4SixHQUM5QjlKLEVBQUVvVyxVQUFZdE0sRUFDWjlKLEdBZG9ELFFBZ0J6RHdCLEksZ0JDdkJOLElBQUlwQixFQUFXLEVBQVEsR0FDbkI0RSxFQUFVLEVBQVEsSUFHbEJxUixFQUZrQixFQUFRLEVBRWxCaFIsQ0FBZ0IsU0FJNUJoSyxFQUFPRCxRQUFVLFNBQVVtRCxHQUN6QixJQUFJK1gsRUFDSixPQUFPbFcsRUFBUzdCLFVBQW1DaUQsS0FBMUI4VSxFQUFXL1gsRUFBRzhYLE1BQTBCQyxFQUEwQixVQUFmdFIsRUFBUXpHLE0sNkJDUnRGLElBQUlrQixFQUFRLEVBQVEsR0FJcEIsU0FBUzhXLEVBQUdsWixFQUFHMEMsR0FDYixPQUFPeVcsT0FBT25aLEVBQUcwQyxHQUduQjNFLEVBQVFxYixjQUFnQmhYLEdBQU0sV0FFNUIsSUFBSWlYLEVBQUtILEVBQUcsSUFBSyxLQUVqQixPQURBRyxFQUFHQyxVQUFZLEVBQ1csTUFBbkJELEVBQUduWCxLQUFLLFdBR2pCbkUsRUFBUXdiLGFBQWVuWCxHQUFNLFdBRTNCLElBQUlpWCxFQUFLSCxFQUFHLEtBQU0sTUFFbEIsT0FEQUcsRUFBR0MsVUFBWSxFQUNVLE1BQWxCRCxFQUFHblgsS0FBSyxXLGdCQ3JCakIsSUFBSTJELEVBQVksRUFBUSxJQUNwQnZCLEVBQXlCLEVBQVEsSUFHakNpSixFQUFlLFNBQVVpTSxHQUMzQixPQUFPLFNBQVUxTCxFQUFPMkwsR0FDdEIsSUFHSUMsRUFBT0MsRUFIUDVLLEVBQUkvTCxPQUFPc0IsRUFBdUJ3SixJQUNsQzhMLEVBQVcvVCxFQUFVNFQsR0FDckJJLEVBQU85SyxFQUFFOUosT0FFYixPQUFJMlUsRUFBVyxHQUFLQSxHQUFZQyxFQUFhTCxFQUFvQixRQUFLclYsR0FDdEV1VixFQUFRM0ssRUFBRStLLFdBQVdGLElBQ04sT0FBVUYsRUFBUSxPQUFVRSxFQUFXLElBQU1DLElBQ3RERixFQUFTNUssRUFBRStLLFdBQVdGLEVBQVcsSUFBTSxPQUFVRCxFQUFTLE1BQzFESCxFQUFvQnpLLEVBQUVnTCxPQUFPSCxHQUFZRixFQUN6Q0YsRUFBb0J6SyxFQUFFckssTUFBTWtWLEVBQVVBLEVBQVcsR0FBK0JELEVBQVMsT0FBbENELEVBQVEsT0FBVSxJQUEwQixRQUk3RzFiLEVBQU9ELFFBQVUsQ0FHZmljLE9BQVF6TSxHQUFhLEdBR3JCd00sT0FBUXhNLEdBQWEsSyw0NUJDaEJ2QixJQUFNcEMsRUFBTzhPLEtBQUtDLE1BQU1DLGFBQWFDLFFBQVEsbUJBQzdDQyxRQUFRQyxJQUFJblAsR0FHUEEsR0FBU0EsRUFBS29QLFdBR1osV0FDSEYsUUFBUUMsSUFBSW5QLEdBQ1ovSyxTQUFTQyxjQUFjLDZCQUE2Qm1hLFVBQVlyUCxFQUFLb1AsV0FDckVuYSxTQUFTQyxjQUFjLG1CQUFtQm1hLFVBQVlyUCxFQUFLc1AsU0FBU3hWLFFBQVUsRUFIM0UsTUF1RFAsU0FBNEJzVixFQUFZRSxHQUNwQ0osUUFBUUMsSUFBSUMsRUFBWUUsR0FNeEIsSUFMQSxJQUFJQyxFQUFhLEVBRVhDLEVBQVcsR0FFYkMsRUFBSyxJQUFJQyxLQUNKNWMsRUFBSSxFQUFHQSxFQUFJLElBQUtBLEVBRXJCMGMsRUFBUyxHQUFELE9BQUlDLEVBQUdFLGNBQVAsWUFBd0JGLEVBQUdHLFdBQTNCLFlBQXlDSCxFQUFHSSxZQUFlLENBQy9EQyxRQUFTL2EsSUFBWTBhLEVBQUdNLFVBQ3hCQyxLQUFNUCxFQUFHSSxVQUNUSSxNQUFPUixFQUFHRyxXQUNWTSxLQUFNVCxFQUFHRSxjQUNUUSxNQUFPLEdBR1hWLEVBQUssSUFBSUMsS0FBS0QsRUFBR3JVLFVBQVksT0FDN0JuRyxTQUFTQyxjQUFjLGdDQUFnQ21hLFVBQXZELFVBQXNFdmEsSUFBTzJhLEVBQUdHLGFBQ2hGM2EsU0FBU0MsY0FBYyxrQ0FBa0NtYSxVQUF6RCxVQUF3RUksRUFBR0ksV0FuQmpDLFEsNmtCQUFBLENBd0J4QlAsR0F4QndCLElBd0I5QywyQkFBZ0MsS0FBckJjLEVBQXFCLFFBQ3RCQyxFQUFjLElBQUlYLEtBQUtVLEVBQVFDLGFBQy9CaGMsRUFBTSxHQUFILE9BQU1nYyxFQUFZVixjQUFsQixZQUFtQ1UsRUFBWVQsV0FBL0MsWUFBNkRTLEVBQVlSLFdBQ2xGLEdBQU14YixLQUFPbWIsRUFBYixDQUlBLElBQU1jLEVBQW9CLEVBQUlGLEVBQVFHLE1BQU1DLFNBQVMsSUFBSXhDLE9BQUosZUFBbUJvQixHQUFjLFFBQVF0VixPQUU5RjBWLEVBQVNuYixHQUFLOGIsT0FBU0csRUFDdkJkLEVBQVNuYixHQUFLOGIsT0FBUyxFQUFJQyxFQUFROUcsWUFBWWtILFNBQVMsSUFBSXhDLE9BQUosZUFBbUJvQixHQUFjLFFBQVF0VixPQUVqR3lWLEdBQWNlLE9BUlZwQixRQUFRdUIsS0FBUixvQkFBMEJwYyxHQUFPK2IsSUE1QkssOEJBdUM5QyxNQUFPLENBQ0hiLGFBQ0FDLFlBeEZBa0IsQ0FBbUIxUSxFQUFLb1AsV0FBWXBQLEVBQUtzUCxVQUZ6Q0MsRUFORCxFQU1DQSxXQUNBQyxFQVBELEVBT0NBLFNBR0p2YSxTQUFTQyxjQUFjLDJCQUEyQm1hLFVBQVlFLEVBRTlELElBQU1vQixFQUFlbmQsT0FBTzhaLE9BQU9rQyxHQUFVb0IsTUFBSyxTQUFDQyxFQUFPQyxHQUN0RCxJQUFJQyxFQUFNRixFQUFNWCxLQUFPWSxFQUFNWixLQVM3QixPQVJXLEdBQVBhLElBQ0FBLEVBQU1GLEVBQU1aLE1BQVFhLEVBQU1iLE9BR25CLEdBQVBjLElBQ0FBLEVBQU1GLEVBQU1iLEtBQU9jLEVBQU1kLE1BR3RCZSxLQUNSeFgsTUFBTSxHQUdMeVgsRUFBV2hiLEtBQUtpTSxJQUFMLE1BQUFqTSxLQUFJLEVBQVEyYSxFQUFhM04sS0FBSSxTQUFBaU8sR0FBSSxPQUFJQSxFQUFLZCxXQUd6RCxHQUZBakIsUUFBUUMsSUFBSTZCLEdBRVJBLEdBQVksR0FDWkEsRUFBVyxPQUNSLENBQ0gsSUFBTUUsRUFBOEMsSUFBN0JsYixLQUFLbWIsTUFBTUgsRUFBVyxLQUV6Q0EsRUFEQUUsRUFBaUJGLEVBQ04sSUFBTUUsRUFFTkEsRUFLbkIsSUFEQSxJQUFNRSxFQUFTLENBQUMsRUFBR3BiLEtBQUttYixNQUFpQixJQUFYSCxHQUFrQmhiLEtBQUttYixNQUFpQixHQUFYSCxHQUFpQmhiLEtBQUttYixNQUFpQixJQUFYSCxHQUFrQkEsR0FDaEdsZSxFQUFJLEVBQUdBLEVBQUlzZSxFQUFPdFgsU0FBVWhILEVBQ2pDbUMsU0FBU0MsY0FBVCx5Q0FBeURwQyxFQUFJLEVBQTdELE1BQW1FdWMsVUFBWStCLEVBQU90ZSxHQUUxRixJQTVDRyxlQTRDTUEsR0FDTG9jLFFBQVFDLElBQUl3QixFQUFhN2QsSUFFekIsSUFBTXVlLEVBQWFwYyxTQUFTQyxjQUFULHdDQUF3RHBDLEVBQUksRUFBNUQsTUFDbkJ1ZSxFQUFXbmMsY0FBYyx1QkFBdUJtYSxVQUFoRCxVQUErRHNCLEVBQWE3ZCxHQUFHa2QsS0FBL0UsYUFBd0ZXLEVBQWE3ZCxHQUFHZ2QsU0FDeEd3QixZQUFXLFdBQ1BELEVBQVduYyxjQUFjLDRCQUE0QnVSLE1BQU04SyxTQUEzRCxVQUF5RXZiLEtBQUttYixNQUFNUixFQUFhN2QsR0FBR3FkLE1BQVFhLEVBQVcsS0FBdkgsT0FDRCxNQVBFbGUsRUFBSSxFQUFHQSxFQUFJNmQsRUFBYTdXLFNBQVVoSCxFQUFHLEVBQXJDQSxHQTVDTixHQURIMGUsU0FBVyxLLGdCQ2ZhLEVBQVEsR0FJcEN0SixDQUFzQixhLGdCQ0p0QixJQUFJdkgsRUFBSSxFQUFRLEdBQ1p3RSxFQUFPLEVBQVEsS0FTbkJ4RSxFQUFFLENBQUVySSxPQUFRLFFBQVNPLE1BQU0sRUFBTUUsUUFSQyxFQUFRLEdBRWYwWSxFQUE0QixTQUFVQyxHQUMvRGpWLE1BQU0wSSxLQUFLdU0sT0FLbUQsQ0FDOUR2TSxLQUFNQSxLLDZCQ1ZSLElBQUk3USxFQUFPLEVBQVEsSUFDZnNNLEVBQVcsRUFBUSxJQUNuQitRLEVBQStCLEVBQVEsSUFDdkNDLEVBQXdCLEVBQVEsSUFDaEMvUSxFQUFXLEVBQVEsSUFDbkJDLEVBQWlCLEVBQVEsSUFDekIrUSxFQUFvQixFQUFRLElBSWhDaGYsRUFBT0QsUUFBVSxTQUFja2YsR0FDN0IsSUFPSWhZLEVBQVF3RixFQUFReVMsRUFBTW5RLEVBQVVxRCxFQUFNbFIsRUFQdEN5RCxFQUFJb0osRUFBU2tSLEdBQ2JwUixFQUFtQixtQkFBUmpHLEtBQXFCQSxLQUFPZ0MsTUFDdkN1VixFQUFrQm5ZLFVBQVVDLE9BQzVCbVksRUFBUUQsRUFBa0IsRUFBSW5ZLFVBQVUsUUFBS2IsRUFDN0NrWixPQUFvQmxaLElBQVZpWixFQUNWRSxFQUFpQk4sRUFBa0JyYSxHQUNuQzBLLEVBQVEsRUFJWixHQUZJZ1EsSUFBU0QsRUFBUTNkLEVBQUsyZCxFQUFPRCxFQUFrQixFQUFJblksVUFBVSxRQUFLYixFQUFXLElBRTNEQSxNQUFsQm1aLEdBQWlDelIsR0FBS2pFLE9BQVNtVixFQUFzQk8sR0FXdkUsSUFEQTdTLEVBQVMsSUFBSW9CLEVBRGI1RyxFQUFTK0csRUFBU3JKLEVBQUVzQyxTQUVkQSxFQUFTb0ksRUFBT0EsSUFDcEJuTyxFQUFRbWUsRUFBVUQsRUFBTXphLEVBQUUwSyxHQUFRQSxHQUFTMUssRUFBRTBLLEdBQzdDcEIsRUFBZXhCLEVBQVE0QyxFQUFPbk8sUUFUaEMsSUFGQWtSLEdBREFyRCxFQUFXdVEsRUFBZWxmLEtBQUt1RSxJQUNmeU4sS0FDaEIzRixFQUFTLElBQUlvQixJQUNMcVIsRUFBTzlNLEVBQUtoUyxLQUFLMk8sSUFBV3NELEtBQU1oRCxJQUN4Q25PLEVBQVFtZSxFQUFVUCxFQUE2Qi9QLEVBQVVxUSxFQUFPLENBQUNGLEVBQUtoZSxNQUFPbU8sSUFBUSxHQUFRNlAsRUFBS2hlLE1BQ2xHK00sRUFBZXhCLEVBQVE0QyxFQUFPbk8sR0FXbEMsT0FEQXVMLEVBQU94RixPQUFTb0ksRUFDVDVDLEksZ0JDdkNULElBQUl6QyxFQUFrQixFQUFRLEdBQzFCekksRUFBUyxFQUFRLElBQ2pCZ0YsRUFBdUIsRUFBUSxHQUUvQmdaLEVBQWN2VixFQUFnQixlQUM5QjhILEVBQWlCbEksTUFBTS9ILFVBSVFzRSxNQUEvQjJMLEVBQWV5TixJQUNqQmhaLEVBQXFCN0IsRUFBRW9OLEVBQWdCeU4sRUFBYSxDQUNsRHRYLGNBQWMsRUFDZC9HLE1BQU9LLEVBQU8sUUFLbEJ2QixFQUFPRCxRQUFVLFNBQVV5QixHQUN6QnNRLEVBQWV5TixHQUFhL2QsSUFBTyxJLGdCQ2xCckMsSUFBSTRDLEVBQVEsRUFBUSxHQUVwQnBFLEVBQU9ELFNBQVdxRSxHQUFNLFdBQ3RCLFNBQVM4UCxLQUVULE9BREFBLEVBQUVyUyxVQUFVa0ssWUFBYyxLQUNuQnBMLE9BQU93WSxlQUFlLElBQUlqRixLQUFTQSxFQUFFclMsYyxnQkNMOUMsSUFBSWtELEVBQVcsRUFBUSxHQUV2Qi9FLEVBQU9ELFFBQVUsU0FBVW1ELEdBQ3pCLElBQUs2QixFQUFTN0IsSUFBYyxPQUFQQSxFQUNuQixNQUFNNEIsVUFBVSxhQUFlRSxPQUFPOUIsR0FBTSxtQkFDNUMsT0FBT0EsSSw2QkNKWCxJQUFJNEssRUFBSSxFQUFRLEdBQ1psSCxFQUFZLEVBQVEsSUFDcEJtSCxFQUFXLEVBQVEsSUFDbkIzSixFQUFRLEVBQVEsR0FDaEJvYixFQUFzQixFQUFRLElBRTlCelYsRUFBTyxHQUNQMFYsRUFBYTFWLEVBQUtnVSxLQUdsQjJCLEVBQXFCdGIsR0FBTSxXQUM3QjJGLEVBQUtnVSxVQUFLNVgsTUFHUndaLEVBQWdCdmIsR0FBTSxXQUN4QjJGLEVBQUtnVSxLQUFLLFNBR1I2QixFQUFnQkosRUFBb0IsUUFNeEMxUixFQUFFLENBQUVySSxPQUFRLFFBQVNnSixPQUFPLEVBQU12SSxPQUpyQndaLElBQXVCQyxJQUFrQkMsR0FJRixDQUNsRDdCLEtBQU0sU0FBYzhCLEdBQ2xCLFlBQXFCMVosSUFBZDBaLEVBQ0hKLEVBQVdyZixLQUFLMk4sRUFBU25HLE9BQ3pCNlgsRUFBV3JmLEtBQUsyTixFQUFTbkcsTUFBT2hCLEVBQVVpWixRLGdCQzdCbEQsSUFBSS9SLEVBQUksRUFBUSxHQUNaZ1MsRUFBVSxFQUFRLEtBQWdDckYsT0FJdEQzTSxFQUFFLENBQUVySSxPQUFRLFNBQVVPLE1BQU0sR0FBUSxDQUNsQ3lVLE9BQVEsU0FBZ0I5VixHQUN0QixPQUFPbWIsRUFBUW5iLE8sZ0JDUG5CLElBQUlOLEVBQWMsRUFBUSxHQUN0QjhRLEVBQWEsRUFBUSxJQUNyQjFMLEVBQWtCLEVBQVEsSUFDMUJrQixFQUF1QixFQUFRLElBQThDakcsRUFHN0U2SyxFQUFlLFNBQVV3USxHQUMzQixPQUFPLFNBQVU3YyxHQU9mLElBTkEsSUFLSTFCLEVBTEFtRCxFQUFJOEUsRUFBZ0J2RyxHQUNwQndILEVBQU95SyxFQUFXeFEsR0FDbEJzQyxFQUFTeUQsRUFBS3pELE9BQ2RoSCxFQUFJLEVBQ0p3TSxFQUFTLEdBRU54RixFQUFTaEgsR0FDZHVCLEVBQU1rSixFQUFLekssS0FDTm9FLElBQWVzRyxFQUFxQnZLLEtBQUt1RSxFQUFHbkQsSUFDL0NpTCxFQUFPdkMsS0FBSzZWLEVBQWEsQ0FBQ3ZlLEVBQUttRCxFQUFFbkQsSUFBUW1ELEVBQUVuRCxJQUcvQyxPQUFPaUwsSUFJWHpNLEVBQU9ELFFBQVUsQ0FHZnlhLFFBQVNqTCxHQUFhLEdBR3RCa0wsT0FBUWxMLEdBQWEsSyxnQkM5QnZCLElBQUlsTCxFQUFjLEVBQVEsR0FDdEJiLEVBQVMsRUFBUSxHQUNqQjhCLEVBQVcsRUFBUSxJQUNuQjBhLEVBQW9CLEVBQVEsS0FDNUJwZixFQUFpQixFQUFRLEdBQXVDOEQsRUFDaEVvRyxFQUFzQixFQUFRLElBQThDcEcsRUFDNUV1VyxFQUFXLEVBQVEsS0FDbkJnRixFQUFXLEVBQVEsSUFDbkJDLEVBQWdCLEVBQVEsS0FDeEIvYSxFQUFXLEVBQVEsSUFDbkJmLEVBQVEsRUFBUSxHQUNoQnNSLEVBQW1CLEVBQVEsSUFBK0JsTixJQUMxRDJYLEVBQWEsRUFBUSxJQUdyQm5GLEVBRmtCLEVBQVEsRUFFbEJoUixDQUFnQixTQUN4Qm9XLEVBQWU1YyxFQUFPMlgsT0FDdEJrRixFQUFrQkQsRUFBYXZlLFVBQy9CeWUsRUFBTSxLQUNOQyxFQUFNLEtBR05DLEVBQWMsSUFBSUosRUFBYUUsS0FBU0EsRUFFeENsRixFQUFnQjhFLEVBQWM5RSxjQVVsQyxHQVJhL1csR0FBZWlCLEVBQVMsVUFBWWtiLEdBQWVwRixHQUFpQmhYLEdBQU0sV0FHckYsT0FGQW1jLEVBQUl2RixJQUFTLEVBRU5vRixFQUFhRSxJQUFRQSxHQUFPRixFQUFhRyxJQUFRQSxHQUFpQyxRQUExQkgsRUFBYUUsRUFBSyxTQUt2RSxDQTBDVixJQXpDQSxJQUFJRyxFQUFnQixTQUFnQkMsRUFBU0MsR0FDM0MsSUFHSTFMLEVBSEEyTCxFQUFlaFosZ0JBQWdCNlksRUFDL0JJLEVBQWtCNUYsRUFBU3lGLEdBQzNCSSxPQUE4QjNhLElBQVZ3YSxFQUd4QixJQUFLQyxHQUFnQkMsR0FBbUJILEVBQVEzVSxjQUFnQjBVLEdBQWlCSyxFQUMvRSxPQUFPSixFQUdMRixFQUNFSyxJQUFvQkMsSUFBbUJKLEVBQVVBLEVBQVFsYixRQUNwRGtiLGFBQW1CRCxJQUN4QkssSUFBbUJILEVBQVFWLEVBQVM3ZixLQUFLc2dCLElBQzdDQSxFQUFVQSxFQUFRbGIsUUFHaEI0VixJQUNGbkcsSUFBVzBMLEdBQVNBLEVBQU16UixRQUFRLE1BQVEsS0FDOUJ5UixFQUFRQSxFQUFNblQsUUFBUSxLQUFNLEtBRzFDLElBQUlmLEVBQVN1VCxFQUNYUSxFQUFjLElBQUlKLEVBQWFNLEVBQVNDLEdBQVNQLEVBQWFNLEVBQVNDLEdBQ3ZFQyxFQUFlaFosS0FBT3lZLEVBQ3RCSSxHQUtGLE9BRklyRixHQUFpQm5HLEdBQVFTLEVBQWlCakosRUFBUSxDQUFFd0ksT0FBUUEsSUFFekR4SSxHQUVMc1UsRUFBUSxTQUFVdmYsR0FDcEJBLEtBQU9pZixHQUFpQjdmLEVBQWU2ZixFQUFlamYsRUFBSyxDQUN6RHlHLGNBQWMsRUFDZG5ILElBQUssV0FBYyxPQUFPc2YsRUFBYTVlLElBQ3ZDZ0gsSUFBSyxTQUFVdEYsR0FBTWtkLEVBQWE1ZSxHQUFPMEIsTUFHekN3SCxFQUFPSSxFQUFvQnNWLEdBQzNCL1EsRUFBUSxFQUNMM0UsRUFBS3pELE9BQVNvSSxHQUFPMFIsRUFBTXJXLEVBQUsyRSxNQUN2Q2dSLEVBQWdCdFUsWUFBYzBVLEVBQzlCQSxFQUFjNWUsVUFBWXdlLEVBQzFCbGIsRUFBUzNCLEVBQVEsU0FBVWlkLEdBSTdCTixFQUFXLFcsZ0JDbkZYLElBQUlwYixFQUFXLEVBQVEsR0FDbkJxVSxFQUFpQixFQUFRLEtBRzdCcFosRUFBT0QsUUFBVSxTQUFVK1AsRUFBT2tSLEVBQU9DLEdBQ3ZDLElBQUlDLEVBQVdDLEVBVWYsT0FQRS9ILEdBRTBDLG1CQUFsQzhILEVBQVlGLEVBQU1qVixjQUMxQm1WLElBQWNELEdBQ2RsYyxFQUFTb2MsRUFBcUJELEVBQVVyZixZQUN4Q3NmLElBQXVCRixFQUFRcGYsV0FDL0J1WCxFQUFldEosRUFBT3FSLEdBQ2pCclIsSSw2QkNkVCxJQUFJaEMsRUFBSSxFQUFRLEdBQ1o1SixFQUFPLEVBQVEsS0FFbkI0SixFQUFFLENBQUVySSxPQUFRLFNBQVVnSixPQUFPLEVBQU12SSxPQUFRLElBQUloQyxPQUFTQSxHQUFRLENBQzlEQSxLQUFNQSxLLDZCQ0pSLElBWU1vYyxFQUNBQyxFQWJGYSxFQUFjLEVBQVEsSUFDdEJsQixFQUFnQixFQUFRLEtBRXhCbUIsRUFBYWxHLE9BQU90WixVQUFVcUMsS0FJOUJvZCxFQUFnQnRjLE9BQU9uRCxVQUFVMkwsUUFFakMrVCxFQUFjRixFQUVkRyxHQUNFbEIsRUFBTSxJQUNOQyxFQUFNLE1BQ1ZjLEVBQVdqaEIsS0FBS2tnQixFQUFLLEtBQ3JCZSxFQUFXamhCLEtBQUttZ0IsRUFBSyxLQUNJLElBQWxCRCxFQUFJaEYsV0FBcUMsSUFBbEJpRixFQUFJakYsV0FHaENGLEVBQWdCOEUsRUFBYzlFLGVBQWlCOEUsRUFBYzNFLGFBRzdEa0csT0FBdUN0YixJQUF2QixPQUFPakMsS0FBSyxJQUFJLElBRXhCc2QsR0FBNEJDLEdBQWlCckcsS0FHdkRtRyxFQUFjLFNBQWNHLEdBQzFCLElBQ0lwRyxFQUFXcUcsRUFBUXJXLEVBQU9yTCxFQUQxQm9iLEVBQUt6VCxLQUVMcU4sRUFBU21HLEdBQWlCQyxFQUFHcEcsT0FDN0IwTCxFQUFRUyxFQUFZaGhCLEtBQUtpYixHQUN6QjdWLEVBQVM2VixFQUFHN1YsT0FDWm9jLEVBQWEsRUFDYkMsRUFBVUgsRUErQ2QsT0E3Q0l6TSxLQUUwQixLQUQ1QjBMLEVBQVFBLEVBQU1uVCxRQUFRLElBQUssS0FDakIwQixRQUFRLE9BQ2hCeVIsR0FBUyxLQUdYa0IsRUFBVTdjLE9BQU8wYyxHQUFLaGIsTUFBTTJVLEVBQUdDLFdBRTNCRCxFQUFHQyxVQUFZLEtBQU9ELEVBQUd2RyxXQUFhdUcsRUFBR3ZHLFdBQXVDLE9BQTFCNE0sRUFBSXJHLEVBQUdDLFVBQVksTUFDM0U5VixFQUFTLE9BQVNBLEVBQVMsSUFDM0JxYyxFQUFVLElBQU1BLEVBQ2hCRCxLQUlGRCxFQUFTLElBQUl4RyxPQUFPLE9BQVMzVixFQUFTLElBQUttYixJQUd6Q2MsSUFDRkUsRUFBUyxJQUFJeEcsT0FBTyxJQUFNM1YsRUFBUyxXQUFZbWIsSUFFN0NhLElBQTBCbEcsRUFBWUQsRUFBR0MsV0FFN0NoUSxFQUFRK1YsRUFBV2poQixLQUFLNlUsRUFBUzBNLEVBQVN0RyxFQUFJd0csR0FFMUM1TSxFQUNFM0osR0FDRkEsRUFBTW5ELE1BQVFtRCxFQUFNbkQsTUFBTXpCLE1BQU1rYixHQUNoQ3RXLEVBQU0sR0FBS0EsRUFBTSxHQUFHNUUsTUFBTWtiLEdBQzFCdFcsRUFBTStELE1BQVFnTSxFQUFHQyxVQUNqQkQsRUFBR0MsV0FBYWhRLEVBQU0sR0FBR3JFLFFBQ3BCb1UsRUFBR0MsVUFBWSxFQUNia0csR0FBNEJsVyxJQUNyQytQLEVBQUdDLFVBQVlELEVBQUc3WCxPQUFTOEgsRUFBTStELE1BQVEvRCxFQUFNLEdBQUdyRSxPQUFTcVUsR0FFekRtRyxHQUFpQm5XLEdBQVNBLEVBQU1yRSxPQUFTLEdBRzNDcWEsRUFBY2xoQixLQUFLa0wsRUFBTSxHQUFJcVcsR0FBUSxXQUNuQyxJQUFLMWhCLEVBQUksRUFBR0EsRUFBSStHLFVBQVVDLE9BQVMsRUFBR2hILFNBQ2ZrRyxJQUFqQmEsVUFBVS9HLEtBQWtCcUwsRUFBTXJMLFFBQUtrRyxNQUsxQ21GLElBSVh0TCxFQUFPRCxRQUFVd2hCLEcsNkJDckZqQixJQUFJcGMsRUFBVyxFQUFRLElBQ25CWixFQUFXLEVBQVEsR0FDbkJILEVBQVEsRUFBUSxHQUNoQnVjLEVBQVEsRUFBUSxJQUdoQk4sRUFBa0JsRixPQUFPdFosVUFDekJpZ0IsRUFBaUJ6QixFQUF5QixTQUUxQzBCLEVBQWMzZCxHQUFNLFdBQWMsTUFBMkQsUUFBcEQwZCxFQUFlMWhCLEtBQUssQ0FBRW9GLE9BQVEsSUFBS21iLE1BQU8sU0FFbkZxQixFQU5ZLFlBTUtGLEVBQWV0aEIsTUFJaEN1aEIsR0FBZUMsSUFDakI3YyxFQUFTZ1csT0FBT3RaLFVBWEYsWUFXd0IsV0FDcEMsSUFBSW9nQixFQUFJMWQsRUFBU3FELE1BQ2I3RixFQUFJaUQsT0FBT2lkLEVBQUV6YyxRQUNiMGMsRUFBS0QsRUFBRXRCLE1BRVgsTUFBTyxJQUFNNWUsRUFBSSxJQURUaUQsWUFBY21CLElBQVArYixHQUFvQkQsYUFBYTlHLFVBQVksVUFBV2tGLEdBQW1CTSxFQUFNdmdCLEtBQUs2aEIsR0FBS0MsS0FFekcsQ0FBRXphLFFBQVEsSyw2QkN0QmYsSUFBSXNVLEVBQVMsRUFBUSxLQUFpQ0EsT0FDbEQ1VSxFQUFzQixFQUFRLElBQzlCMlIsRUFBaUIsRUFBUSxLQUd6QnBELEVBQW1Cdk8sRUFBb0JxQixJQUN2Q3BCLEVBQW1CRCxFQUFvQmlDLFVBRnJCLG1CQU10QjBQLEVBQWU5VCxPQUFRLFVBQVUsU0FBVStULEdBQ3pDckQsRUFBaUI5TixLQUFNLENBQ3JCMkIsS0FSa0Isa0JBU2xCZ0UsT0FBUXZJLE9BQU8rVCxHQUNmMUosTUFBTyxPQUlSLFdBQ0QsSUFHSThTLEVBSEE3WSxFQUFRbEMsRUFBaUJRLE1BQ3pCMkYsRUFBU2pFLEVBQU1pRSxPQUNmOEIsRUFBUS9GLEVBQU0rRixNQUVsQixPQUFJQSxHQUFTOUIsRUFBT3RHLE9BQWUsQ0FBRS9GLFdBQU9pRixFQUFXa00sTUFBTSxJQUM3RDhQLEVBQVFwRyxFQUFPeE8sRUFBUThCLEdBQ3ZCL0YsRUFBTStGLE9BQVM4UyxFQUFNbGIsT0FDZCxDQUFFL0YsTUFBT2loQixFQUFPOVAsTUFBTSxRLDZCQzFCL0IsSUFBSXZFLEVBQUksRUFBUSxHQUNab0wsRUFBNEIsRUFBUSxLQUNwQzVTLEVBQXlCLEVBQVEsSUFDakMwSCxFQUFXLEVBQVEsSUFDbkJwSCxFQUFZLEVBQVEsSUFDcEJyQyxFQUFXLEVBQVEsR0FDbkJvRixFQUFVLEVBQVEsSUFDbEJzUixFQUFXLEVBQVEsS0FDbkJtSCxFQUFpQixFQUFRLElBQ3pCbGQsRUFBOEIsRUFBUSxJQUN0Q2QsRUFBUSxFQUFRLEdBQ2hCNEYsRUFBa0IsRUFBUSxHQUMxQnFZLEVBQXFCLEVBQVEsSUFDN0JDLEVBQXFCLEVBQVEsS0FDN0JuYixFQUFzQixFQUFRLElBQzlCOEMsRUFBVSxFQUFRLElBRWxCc1ksRUFBWXZZLEVBQWdCLFlBRzVCMEwsRUFBbUJ2TyxFQUFvQnFCLElBQ3ZDcEIsRUFBbUJELEVBQW9CaUMsVUFGZG9aLDBCQUd6Qm5DLEVBQWtCbEYsT0FBT3RaLFVBQ3pCNGdCLEVBQW9CcEMsRUFBZ0JuYyxLQUNwQ3dlLEVBQWlCLEdBQUcvRSxTQUVwQmdGLElBQWdDRCxJQUFtQnRlLEdBQU0sV0FDM0QsSUFBSXVaLFNBQVMsUUFjWGlGLEVBQXdCMUosR0FBMEIsU0FBOEJaLEVBQVEvSyxFQUFRL0osRUFBUXFmLEdBQzFHbk4sRUFBaUI5TixLQUFNLENBQ3JCMkIsS0F4QnlCaVoseUJBeUJ6QmxLLE9BQVFBLEVBQ1IvSyxPQUFRQSxFQUNSL0osT0FBUUEsRUFDUndSLFFBQVM2TixFQUNUeFEsTUFBTSxNQTlCVSxpQkFnQ0YsV0FDaEIsSUFBSS9JLEVBQVFsQyxFQUFpQlEsTUFDN0IsR0FBSTBCLEVBQU0rSSxLQUFNLE1BQU8sQ0FBRW5SLFdBQU9pRixFQUFXa00sTUFBTSxHQUNqRCxJQUFJNFAsRUFBSTNZLEVBQU1nUCxPQUNWdkgsRUFBSXpILEVBQU1pRSxPQUNWakMsRUF6QlcsU0FBVTJXLEVBQUdsUixHQUM1QixJQUNJdEUsRUFEQXZJLEVBQU8rZCxFQUFFL2QsS0FFYixHQUFtQixtQkFBUkEsRUFBb0IsQ0FFN0IsR0FBcUIsaUJBRHJCdUksRUFBU3ZJLEVBQUs5RCxLQUFLNmhCLEVBQUdsUixJQUNTLE1BQU1qTSxVQUFVLHlCQUMvQyxPQUFPMkgsRUFDUCxPQUFPZ1csRUFBa0JyaUIsS0FBSzZoQixFQUFHbFIsR0FrQnZCK1IsQ0FBV2IsRUFBR2xSLEdBQzFCLE9BQWMsT0FBVnpGLEVBQXVCLENBQUVwSyxXQUFPaUYsRUFBV2tNLEtBQU0vSSxFQUFNK0ksTUFBTyxHQUM5RC9JLEVBQU05RixRQUNnQixJQUFwQndCLE9BQU9zRyxFQUFNLE1BQVcyVyxFQUFFM0csVUFBWWdILEVBQW1CdlIsRUFBRy9DLEVBQVNpVSxFQUFFM0csV0FBWWhTLEVBQU0wTCxVQUN0RixDQUFFOVQsTUFBT29LLEVBQU8rRyxNQUFNLEtBRS9CL0ksRUFBTStJLE1BQU8sRUFDTixDQUFFblIsTUFBT29LLEVBQU8rRyxNQUFNLE9BRzNCMFEsRUFBWSxTQUFVeFYsR0FDeEIsSUFFSU0sRUFBR21WLEVBQVlyQyxFQUFPc0MsRUFBU3pmLEVBQVFxZixFQUZ2Q1osRUFBSTFkLEVBQVNxRCxNQUNibUosRUFBSS9MLE9BQU91SSxHQVlmLE9BVkFNLEVBQUl3VSxFQUFtQkosRUFBRzlHLGFBRVBoVixLQURuQjZjLEVBQWFmLEVBQUV0QixRQUNpQnNCLGFBQWE5RyxVQUFZLFVBQVdrRixLQUNsRTJDLEVBQWFaLEVBQWVoaUIsS0FBSzZoQixJQUVuQ3RCLE9BQXVCeGEsSUFBZjZjLEVBQTJCLEdBQUtoZSxPQUFPZ2UsR0FDL0NDLEVBQVUsSUFBSXBWLEVBQUVBLElBQU1zTixPQUFTOEcsRUFBRXpjLE9BQVN5YyxFQUFHdEIsR0FDN0NuZCxLQUFZbWQsRUFBTXpSLFFBQVEsS0FDMUIyVCxLQUFpQmxDLEVBQU16UixRQUFRLEtBQy9CK1QsRUFBUTNILFVBQVl0TixFQUFTaVUsRUFBRTNHLFdBQ3hCLElBQUlzSCxFQUFzQkssRUFBU2xTLEVBQUd2TixFQUFRcWYsSUFLdkQvVSxFQUFFLENBQUVySSxPQUFRLFNBQVVnSixPQUFPLEVBQU12SSxPQUFReWMsR0FBK0IsQ0FDeEVoRixTQUFVLFNBQWtCckYsR0FDMUIsSUFDV3ZILEVBQUdrUyxFQUFTQyxFQURuQnZlLEVBQUkyQixFQUF1QnNCLE1BRS9CLEdBQWMsTUFBVjBRLEVBQWdCLENBQ2xCLEdBQUkyQyxFQUFTM0MsTUFDSHRULE9BQU9zQixFQUF1QixVQUFXK1osRUFDN0MvSCxFQUFPcUksTUFDUHlCLEVBQWVoaUIsS0FBS2tZLEtBRVpwSixRQUFRLEtBQU0sTUFBTXBLLFVBQVUsaURBRTVDLEdBQUk2ZCxFQUE2QixPQUFPRCxFQUFlclgsTUFBTTFHLEVBQUdxQyxXQUdoRSxRQURnQmIsS0FEaEI4YyxFQUFVM0ssRUFBT2lLLEtBQ1l0WSxHQUE4QixVQUFuQk4sRUFBUTJPLEtBQXFCMkssRUFBVUYsR0FDaEUsTUFBWEUsRUFBaUIsT0FBT3JjLEVBQVVxYyxHQUFTN2lCLEtBQUtrWSxFQUFRM1QsUUFDdkQsR0FBSWdlLEVBQTZCLE9BQU9ELEVBQWVyWCxNQUFNMUcsRUFBR3FDLFdBR3ZFLE9BRkErSixFQUFJL0wsT0FBT0wsR0FDWHVlLEVBQUssSUFBSS9ILE9BQU83QyxFQUFRLEtBQ2pCck8sRUFBVThZLEVBQVUzaUIsS0FBSzhpQixFQUFJblMsR0FBS21TLEVBQUdYLEdBQVd4UixNQUkzRDlHLEdBQVdzWSxLQUFhbEMsR0FBbUJuYixFQUE0Qm1iLEVBQWlCa0MsRUFBV1EsSSw2QkMzR25HLElBQUloSCxFQUFTLEVBQVEsS0FBaUNBLE9BSXREL2IsRUFBT0QsUUFBVSxTQUFVZ1IsRUFBRzFCLEVBQU8yRixHQUNuQyxPQUFPM0YsR0FBUzJGLEVBQVUrRyxFQUFPaEwsRUFBRzFCLEdBQU9wSSxPQUFTLEssZ0JDTnRELElBQUl6RCxFQUFTLEVBQVEsR0FDakIyZixFQUFlLEVBQVEsS0FDdkJDLEVBQXVCLEVBQVEsS0FDL0JsZSxFQUE4QixFQUFRLElBQ3RDOEUsRUFBa0IsRUFBUSxHQUUxQjZILEVBQVc3SCxFQUFnQixZQUMzQnNDLEVBQWdCdEMsRUFBZ0IsZUFDaENxWixFQUFjRCxFQUFxQjNJLE9BRXZDLElBQUssSUFBSTZJLEtBQW1CSCxFQUFjLENBQ3hDLElBQUlJLEVBQWEvZixFQUFPOGYsR0FDcEJFLEVBQXNCRCxHQUFjQSxFQUFXMWhCLFVBQ25ELEdBQUkyaEIsRUFBcUIsQ0FFdkIsR0FBSUEsRUFBb0IzUixLQUFjd1IsRUFBYSxJQUNqRG5lLEVBQTRCc2UsRUFBcUIzUixFQUFVd1IsR0FDM0QsTUFBT2xmLEdBQ1BxZixFQUFvQjNSLEdBQVl3UixFQUtsQyxHQUhLRyxFQUFvQmxYLElBQ3ZCcEgsRUFBNEJzZSxFQUFxQmxYLEVBQWVnWCxHQUU5REgsRUFBYUcsR0FBa0IsSUFBSyxJQUFJelgsS0FBZXVYLEVBRXpELEdBQUlJLEVBQW9CM1gsS0FBaUJ1WCxFQUFxQnZYLEdBQWMsSUFDMUUzRyxFQUE0QnNlLEVBQXFCM1gsRUFBYXVYLEVBQXFCdlgsSUFDbkYsTUFBTzFILEdBQ1BxZixFQUFvQjNYLEdBQWV1WCxFQUFxQnZYLE8sY0MxQmhFN0wsRUFBT0QsUUFBVSxDQUNmMGpCLFlBQWEsRUFDYkMsb0JBQXFCLEVBQ3JCQyxhQUFjLEVBQ2RDLGVBQWdCLEVBQ2hCQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxxQkFBc0IsRUFDdEJDLFNBQVUsRUFDVkMsa0JBQW1CLEVBQ25CQyxlQUFnQixFQUNoQkMsZ0JBQWlCLEVBQ2pCQyxrQkFBbUIsRUFDbkJDLFVBQVcsRUFDWEMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLFNBQVUsRUFDVkMsaUJBQWtCLEVBQ2xCQyxPQUFRLEVBQ1JDLFlBQWEsRUFDYkMsY0FBZSxFQUNmQyxjQUFlLEVBQ2ZDLGVBQWdCLEVBQ2hCQyxhQUFjLEVBQ2RDLGNBQWUsRUFDZkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLGVBQWdCLEVBQ2hCQyxpQkFBa0IsRUFDbEJDLGNBQWUsRUFDZkMsVUFBVyxJIiwiZmlsZSI6ImFuYWx5dGljcy4xNjVhMGE2MDkyNjQwY2IwOTAwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTgpO1xuIiwiXHJcblxyXG5jb25zdCBjb25zdGFudHMgPSB7XHJcbiAgIE9ORV9XRUVLOiAyNCAqIDYwICogNjAgKiAxMDAwICogNyxcclxuICAgT05FX0RBWTogMTAwMCAqIDYwICogNjAgKiAyNCxcclxuICAgTkVXU0FQSV9LRVk6ICc0MjJhYWNkN2I5YWY0YjY2YmNhODJlMGYyMzQxOGNmOCcsXHJcbiAgIE5FV1NBUElfVVJMOiAnaHR0cHM6Ly9wcmFrdGlrdW0udGsvbmV3cy92Mi9ldmVyeXRoaW5nJyxcclxuICAgQ0FSRFNfUEVSX1NUUklORzogMyxcclxuICAgR0lUSFVCX0FQSV9VUkw6ICdodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL0thdGVyaW5hRXZzZWV2YS9EaXBsb21hLmdpdGh1Yi5pby9jb21taXRzP3NoYT1sZXZlbC0xJyxcclxuICAgLy8gTkVXU0FQSV9LRVk6ICdjZWQ5OGY3ZWFkNjY0OTZlYjJiYjI0ODYyMjgyNzVjOScsXHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vbnRocyA9IFtcclxuICAgJ9Cv0L3QstCw0YDRjycsIFwi0KTQtdCy0YDQsNC70Y9cIiwgXCLQnNCw0YDRgtCwXCIsIFwi0JDQv9GA0LXQu9GPXCIsIFwi0JzQsNGPXCIsIFwi0JjRjtC90Y9cIiwgXCLQmNGO0LvRj1wiLCBcItCQ0JLQs9GD0YHRgtCwXCIsIFwi0KHQtdC90YLRj9Cx0YDRj1wiLCBcItCe0LrRgtGP0LHRgNGPXCIsIFwi0J3QvtGP0LHRgNGPXCIsIFwi0JTQtdC60LDQsdGA0Y9cIlxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IHdlZWtEYXlOYW1lID0gW1wi0L/QvVwiLCBcItCy0YJcIiwgXCLRgdGAXCIsIFwi0YfRglwiLCBcItC/0YJcIiwgXCLRgdCxXCIsIFwi0LLRgVwiXTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hSZXNhdWx0R3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtcmVzYXVsdF9fZ3JpZCcpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNlYXJjaFJlc2F1bHRQcm9ncmVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtcmVzYXVsdF9fcHJvZ3Jlc3MnKTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hSZXNhdWx0U2hvd01vcmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLXJlc2F1bHRfX3Nob3ctbW9yZScpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNlYXJjaFJlc2F1bHRGYWlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1yZXNhdWx0X19mYWlsJyk7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoUmVzYXVsdEhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtcmVzYXVsdF9faGVhZGVyJyk7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VhcmNoUmVzYXVsdERlc2MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLXJlc2F1bHRfX2Rlc2MnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbnN0YW50czsiLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICBlbHNlIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy42LjUnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24udG9TdHJpbmc7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAodHlwZW9mIHN0b3JlLmluc3BlY3RTb3VyY2UgIT0gJ2Z1bmN0aW9uJykge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7XG4gICAgfTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIG5ldyAoQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaC5jYWxsKHRhcmdldCwgdmFsdWUpOyAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNilcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSBnZXRCdWlsdEluKENPTlNUUlVDVE9SX05BTUUpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiBDb25zdHJ1Y3RvciAmJiAhQ29uc3RydWN0b3JbU1BFQ0lFU10pIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGVUb1N0cmluZyA9IEZ1bmN0aW9uUHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuLy8gRkY0OS0gaXNzdWVcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIHx8ICFVU0VTX1RPX0xFTkdUSCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RDcmVhdGUobmF0aXZlRGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8ICRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHByb3BlcnRpZXMsIGtleSkpICRkZWZpbmVQcm9wZXJ0eShPLCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gTztcbn07XG5cbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7XG59O1xuXG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBTeW1ib2xgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXMoU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYoMSk7IH0pIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kIGJlaGF2aW9yIHdpdGggc3ltYm9sc1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyICRyZXBsYWNlcjtcbiAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICAgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoISRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xufVxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG5cbmlmIChERVNDUklQVE9SUyAmJiB0eXBlb2YgTmF0aXZlU3ltYm9sID09ICdmdW5jdGlvbicgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBOYXRpdmVTeW1ib2wucHJvdG90eXBlKSB8fFxuICAvLyBTYWZhcmkgMTIgYnVnXG4gIE5hdGl2ZVN5bWJvbCgpLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbikpIHtcbiAgdmFyIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSA9IHt9O1xuICAvLyB3cmFwIFN5bWJvbCBjb25zdHJ1Y3RvciBmb3IgY29ycmVjdCB3b3JrIHdpdGggdW5kZWZpbmVkIGRlc2NyaXB0aW9uXG4gIHZhciBTeW1ib2xXcmFwcGVyID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMgaW5zdGFuY2VvZiBTeW1ib2xXcmFwcGVyXG4gICAgICA/IG5ldyBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pXG4gICAgICAvLyBpbiBFZGdlIDEzLCBTdHJpbmcoU3ltYm9sKHVuZGVmaW5lZCkpID09PSAnU3ltYm9sKHVuZGVmaW5lZCknXG4gICAgICA6IGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyBOYXRpdmVTeW1ib2woKSA6IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgaWYgKGRlc2NyaXB0aW9uID09PSAnJykgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlW3Jlc3VsdF0gPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgdmFyIHN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcbiAgc3ltYm9sUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ltYm9sV3JhcHBlcjtcblxuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBuYXRpdmUgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgcmVnZXhwID0gL15TeW1ib2xcXCgoLiopXFwpW14pXSskLztcbiAgZGVmaW5lUHJvcGVydHkoc3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gaXNPYmplY3QodGhpcykgPyB0aGlzLnZhbHVlT2YoKSA6IHRoaXM7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sVG9TdHJpbmcuY2FsbChzeW1ib2wpO1xuICAgICAgaWYgKGhhcyhFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gbmF0aXZlID8gc3RyaW5nLnNsaWNlKDcsIC0xKSA6IHN0cmluZy5yZXBsYWNlKHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnc2xpY2UnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMDogMCwgMTogMiB9KTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vZmFpbHMnKTtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3IsXG4vLyBzbyB3ZSB1c2UgYW4gaW50ZXJtZWRpYXRlIGZ1bmN0aW9uLlxuZnVuY3Rpb24gUkUocywgZikge1xuICByZXR1cm4gUmVnRXhwKHMsIGYpO1xufVxuXG5leHBvcnRzLlVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG4gIHZhciByZSA9IFJFKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPSBudWxsO1xufSk7XG5cbmV4cG9ydHMuQlJPS0VOX0NBUkVUID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gUkUoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiaW1wb3J0ICcuLi9wYWdlcy9zdHlsZS5jc3MnO1xyXG5pbXBvcnQgJy4uL3BhZ2VzL2FuYWx5dGljcy5jc3MnO1xyXG5pbXBvcnQge1xyXG4gICAgd2Vla0RheU5hbWVcclxufSBmcm9tICcuLi9qcy9jb25zdGFudHMvQ29uc3RhbnRzJztcclxuaW1wb3J0IHtcclxuICAgIG1vbnRoc1xyXG59IGZyb20gJy4uL2pzL2NvbnN0YW50cy9Db25zdGFudHMnO1xyXG5cclxuY29uc3QgZGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlYXJjaC1yZXNhdWx0JykpO1xyXG5jb25zb2xlLmxvZyhkYXRhKTtcclxuXHJcblxyXG5pZiAoIWRhdGEgfHwgIWRhdGEuc2VhcmNoRGF0YSkge1xyXG5cclxuICAgIGxvY2F0aW9uID0gJy8nO1xyXG59IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmFseXRpY3NfX3RpdGxlX3JlcXVlc3QnKS5pbm5lclRleHQgPSBkYXRhLnNlYXJjaERhdGE7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW5hbHl0aWNzX19udW0nKS5pbm5lclRleHQgPSBkYXRhLmFydGljbGVzLmxlbmd0aCB8fCAwO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgICB0aXRsZUNvdW50LFxyXG4gICAgICAgIHdlZWtEYXlzLFxyXG4gICAgfSA9IGFydGljbGVzU3RhdGlzdGljcyhkYXRhLnNlYXJjaERhdGEsIGRhdGEuYXJ0aWNsZXMpO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmFseXRpY3NfX251bV9oZWFkZXJzJykuaW5uZXJUZXh0ID0gdGl0bGVDb3VudDtcclxuXHJcbiAgICBjb25zdCBhcnRpY2xlc1N0YXQgPSBPYmplY3QudmFsdWVzKHdlZWtEYXlzKS5zb3J0KChpdGVtMSwgaXRlbTIpID0+IHtcclxuICAgICAgICBsZXQgcmVzID0gaXRlbTEueWVhciAtIGl0ZW0yLnllYXI7XHJcbiAgICAgICAgaWYgKHJlcyA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJlcyA9IGl0ZW0xLm1vbnRoIC0gaXRlbTIubW9udGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVzID09IDApIHtcclxuICAgICAgICAgICAgcmVzID0gaXRlbTEuZGF0ZSAtIGl0ZW0yLmRhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSkuc2xpY2UoMSk7XHJcblxyXG5cclxuICAgIGxldCBtYXhDb3VudCA9IE1hdGgubWF4KC4uLmFydGljbGVzU3RhdC5tYXAoaXRlbSA9PiBpdGVtLmNvdW50KSk7XHJcbiAgICBjb25zb2xlLmxvZyhtYXhDb3VudClcclxuXHJcbiAgICBpZiAobWF4Q291bnQgPD0gNDApIHtcclxuICAgICAgICBtYXhDb3VudCA9IDQwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCB0bXBDb2VmZmljaWVudCA9IE1hdGgucm91bmQobWF4Q291bnQgLyAxMDApICogMTAwO1xyXG4gICAgICAgIGlmICh0bXBDb2VmZmljaWVudCA8IG1heENvdW50KSB7XHJcbiAgICAgICAgICAgIG1heENvdW50ID0gMTAwICsgdG1wQ29lZmZpY2llbnQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWF4Q291bnQgPSB0bXBDb2VmZmljaWVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcG9pbnRzID0gWzAsIE1hdGgucm91bmQobWF4Q291bnQgKiAwLjI1KSwgTWF0aC5yb3VuZChtYXhDb3VudCAqIDAuNSksIE1hdGgucm91bmQobWF4Q291bnQgKiAwLjc1KSwgbWF4Q291bnRdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZGlhZ3JhbW1fX3NjYWxhX251bTpudGgtY2hpbGQoJHtpICsgMX0pYCkuaW5uZXJUZXh0ID0gcG9pbnRzW2ldO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnRpY2xlc1N0YXQubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhhcnRpY2xlc1N0YXRbaV0pXHJcblxyXG4gICAgICAgIGNvbnN0IGRpYWdyYW1Cb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuZGlnYXJhbW1fX3dlZWtfYm94Om50aC1jaGlsZCgke2kgKyAxfSlgKTtcclxuICAgICAgICBkaWFncmFtQm94LnF1ZXJ5U2VsZWN0b3IoJy5kaWFncmFtbV9fd2Vla19kYXknKS5pbm5lclRleHQgPSBgJHthcnRpY2xlc1N0YXRbaV0uZGF0ZX0sICR7YXJ0aWNsZXNTdGF0W2ldLmRheVdlZWt9YDtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgZGlhZ3JhbUJveC5xdWVyeVNlbGVjdG9yKCcuZGlnYXJhbW1fX3dlZWtfcXVhbnRpdHknKS5zdHlsZS5tYXhXaWR0aCA9IGAke01hdGgucm91bmQoYXJ0aWNsZXNTdGF0W2ldLmNvdW50IC8gbWF4Q291bnQgKiAxMDApfSVgO1xyXG4gICAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFydGljbGVzU3RhdGlzdGljcyhzZWFyY2hEYXRhLCBhcnRpY2xlcykge1xyXG4gICAgY29uc29sZS5sb2coc2VhcmNoRGF0YSwgYXJ0aWNsZXMpXHJcbiAgICBsZXQgdGl0bGVDb3VudCA9IDA7XHJcblxyXG4gICAgY29uc3Qgd2Vla0RheXMgPSB7fTtcclxuXHJcbiAgICBsZXQgZHQgPSBuZXcgRGF0ZSgpXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xyXG5cclxuICAgICAgICB3ZWVrRGF5c1tgJHtkdC5nZXRGdWxsWWVhcigpfS0ke2R0LmdldE1vbnRoKCl9LSR7ZHQuZ2V0RGF0ZSgpfWBdID0ge1xyXG4gICAgICAgICAgICBkYXlXZWVrOiB3ZWVrRGF5TmFtZVtkdC5nZXREYXkoKV0sXHJcbiAgICAgICAgICAgIGRhdGU6IGR0LmdldERhdGUoKSxcclxuICAgICAgICAgICAgbW9udGg6IGR0LmdldE1vbnRoKCksXHJcbiAgICAgICAgICAgIHllYXI6IGR0LmdldEZ1bGxZZWFyKCksXHJcbiAgICAgICAgICAgIGNvdW50OiAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkdCA9IG5ldyBEYXRlKGR0LnZhbHVlT2YoKSAtIDEwMDAgKiA2MCAqIDYwICogMjQpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kaWFncmFtbV9fc3VidGl0bGVfZGF0YS1udW0nKS5pbm5lclRleHQgPSBgJHttb250aHNbZHQuZ2V0TW9udGgoKV19YDtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhZ3JhbW1fX3N1YnRpdGxlX2RhdGEtbW9udGgnKS5pbm5lclRleHQgPSBgJHtkdC5nZXREYXRlKCl9YFxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgZm9yIChjb25zdCBhcnRpY2xlIG9mIGFydGljbGVzKSB7XHJcbiAgICAgICAgY29uc3QgcHVibGlzaGVkQXQgPSBuZXcgRGF0ZShhcnRpY2xlLnB1Ymxpc2hlZEF0KTtcclxuICAgICAgICBjb25zdCBrZXkgPSBgJHtwdWJsaXNoZWRBdC5nZXRGdWxsWWVhcigpfS0ke3B1Ymxpc2hlZEF0LmdldE1vbnRoKCl9LSR7cHVibGlzaGVkQXQuZ2V0RGF0ZSgpfWA7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHdlZWtEYXlzKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYE5vdCBmb3VuZCAke2tleX1gLCBhcnRpY2xlKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRpdGxlQ291bnRBcnRpY2xlID0gWy4uLmFydGljbGUudGl0bGUubWF0Y2hBbGwobmV3IFJlZ0V4cChgKCB8Xikke3NlYXJjaERhdGF9YCwgJ2lnJykpXS5sZW5ndGg7XHJcblxyXG4gICAgICAgIHdlZWtEYXlzW2tleV0uY291bnQgKz0gdGl0bGVDb3VudEFydGljbGU7XHJcbiAgICAgICAgd2Vla0RheXNba2V5XS5jb3VudCArPSBbLi4uYXJ0aWNsZS5kZXNjcmlwdGlvbi5tYXRjaEFsbChuZXcgUmVnRXhwKGAoIHxeKSR7c2VhcmNoRGF0YX1gLCAnaWcnKSldLmxlbmd0aDtcclxuXHJcbiAgICAgICAgdGl0bGVDb3VudCArPSB0aXRsZUNvdW50QXJ0aWNsZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpdGxlQ291bnQsXHJcbiAgICAgICAgd2Vla0RheXNcclxuICAgIH1cclxufVxyXG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciB0ZXN0ID0gW107XG52YXIgbmF0aXZlU29ydCA9IHRlc3Quc29ydDtcblxuLy8gSUU4LVxudmFyIEZBSUxTX09OX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KTtcbi8vIFY4IGJ1Z1xudmFyIEZBSUxTX09OX05VTEwgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydChudWxsKTtcbn0pO1xuLy8gT2xkIFdlYktpdFxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgIVNUUklDVF9NRVRIT0Q7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiBuYXRpdmVTb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLnZhbHVlcztcblxuLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoTyk7XG4gIH1cbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKE8sIGtleSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4gIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLnNldDtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiYgaXNGb3JjZWQoJ1JlZ0V4cCcsICghQ09SUkVDVF9ORVcgfHwgVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpO1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLWNvbnN0cnVjdG9yXG5pZiAoRk9SQ0VEKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IHRoaXMgaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBzdGlja3k7XG5cbiAgICBpZiAoIXRoaXNJc1JlZ0V4cCAmJiBwYXR0ZXJuSXNSZWdFeHAgJiYgcGF0dGVybi5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwV3JhcHBlciAmJiBmbGFnc0FyZVVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfVxuXG4gICAgaWYgKENPUlJFQ1RfTkVXKSB7XG4gICAgICBpZiAocGF0dGVybklzUmVnRXhwICYmICFmbGFnc0FyZVVuZGVmaW5lZCkgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgIH0gZWxzZSBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cFdyYXBwZXIpIHtcbiAgICAgIGlmIChmbGFnc0FyZVVuZGVmaW5lZCkgZmxhZ3MgPSBnZXRGbGFncy5jYWxsKHBhdHRlcm4pO1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgIH1cblxuICAgIGlmIChVTlNVUFBPUlRFRF9ZKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIGZsYWdzLmluZGV4T2YoJ3knKSA+IC0xO1xuICAgICAgaWYgKHN0aWNreSkgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKC95L2csICcnKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gaW5oZXJpdElmUmVxdWlyZWQoXG4gICAgICBDT1JSRUNUX05FVyA/IG5ldyBOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpIDogTmF0aXZlUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSxcbiAgICAgIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsXG4gICAgICBSZWdFeHBXcmFwcGVyXG4gICAgKTtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ZICYmIHN0aWNreSkgc2V0SW50ZXJuYWxTdGF0ZShyZXN1bHQsIHsgc3RpY2t5OiBzdGlja3kgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgcmVkZWZpbmUoZ2xvYmFsLCAnUmVnRXhwJywgUmVnRXhwV3JhcHBlcik7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgdHlwZW9mIChOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJlxuICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmXG4gICAgTmV3VGFyZ2V0UHJvdG90eXBlICE9PSBXcmFwcGVyLnByb3RvdHlwZVxuICApIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpO1xuICByZXR1cm4gJHRoaXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4vcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1kgfHwgc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1k7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSByZWdleHBGbGFncy5jYWxsKHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgneScsICcnKTtcbiAgICAgIGlmIChmbGFncy5pbmRleE9mKCdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IFN0cmluZyhzdHIpLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHJbcmUubGFzdEluZGV4IC0gMV0gIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBtYXRjaC5pbnB1dC5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBmbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBuYXRpdmVUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgcCA9IFN0cmluZyhSLnNvdXJjZSk7XG4gICAgdmFyIHJmID0gUi5mbGFncztcbiAgICB2YXIgZiA9IFN0cmluZyhyZiA9PT0gdW5kZWZpbmVkICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgPyBmbGFncy5jYWxsKFIpIDogcmYpO1xuICAgIHJldHVybiAnLycgKyBwICsgJy8nICsgZjtcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgTUFUQ0hfQUxMID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xudmFyIFJFR0VYUF9TVFJJTkcgPSAnUmVnRXhwIFN0cmluZyc7XG52YXIgUkVHRVhQX1NUUklOR19JVEVSQVRPUiA9IFJFR0VYUF9TVFJJTkcgKyAnIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmVnRXhwQnVpbHRpbkV4ZWMgPSBSZWdFeHBQcm90b3R5cGUuZXhlYztcbnZhciBuYXRpdmVNYXRjaEFsbCA9ICcnLm1hdGNoQWxsO1xuXG52YXIgV09SS1NfV0lUSF9OT05fR0xPQkFMX1JFR0VYID0gISFuYXRpdmVNYXRjaEFsbCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAnYScubWF0Y2hBbGwoLy4vKTtcbn0pO1xuXG52YXIgcmVnRXhwRXhlYyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICB2YXIgcmVzdWx0O1xuICBpZiAodHlwZW9mIGV4ZWMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPSAnb2JqZWN0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgZXhlYyByZXN1bHQnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiByZWdFeHBCdWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJlZ2V4cCwgc3RyaW5nLCBnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IsXG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgZ2xvYmFsOiBnbG9iYWwsXG4gICAgdW5pY29kZTogZnVsbFVuaWNvZGUsXG4gICAgZG9uZTogZmFsc2VcbiAgfSk7XG59LCBSRUdFWFBfU1RSSU5HLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB2YXIgUiA9IHN0YXRlLnJlZ2V4cDtcbiAgdmFyIFMgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBtYXRjaCA9IHJlZ0V4cEV4ZWMoUiwgUyk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogc3RhdGUuZG9uZSA9IHRydWUgfTtcbiAgaWYgKHN0YXRlLmdsb2JhbCkge1xuICAgIGlmIChTdHJpbmcobWF0Y2hbMF0pID09ICcnKSBSLmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChSLmxhc3RJbmRleCksIHN0YXRlLnVuaWNvZGUpO1xuICAgIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbnZhciAkbWF0Y2hBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBTID0gU3RyaW5nKHN0cmluZyk7XG4gIHZhciBDLCBmbGFnc1ZhbHVlLCBmbGFncywgbWF0Y2hlciwgZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICBmbGFnc1ZhbHVlID0gUi5mbGFncztcbiAgaWYgKGZsYWdzVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBSIGluc3RhbmNlb2YgUmVnRXhwICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpKSB7XG4gICAgZmxhZ3NWYWx1ZSA9IGdldFJlZ0V4cEZsYWdzLmNhbGwoUik7XG4gIH1cbiAgZmxhZ3MgPSBmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhmbGFnc1ZhbHVlKTtcbiAgbWF0Y2hlciA9IG5ldyBDKEMgPT09IFJlZ0V4cCA/IFIuc291cmNlIDogUiwgZmxhZ3MpO1xuICBnbG9iYWwgPSAhIX5mbGFncy5pbmRleE9mKCdnJyk7XG4gIGZ1bGxVbmljb2RlID0gISF+ZmxhZ3MuaW5kZXhPZigndScpO1xuICBtYXRjaGVyLmxhc3RJbmRleCA9IHRvTGVuZ3RoKFIubGFzdEluZGV4KTtcbiAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IobWF0Y2hlciwgUywgZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctbWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggfSwge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBmbGFncywgUywgbWF0Y2hlciwgcng7XG4gICAgaWYgKHJlZ2V4cCAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNSZWdFeHAocmVnZXhwKSkge1xuICAgICAgICBmbGFncyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlXG4gICAgICAgICAgPyByZWdleHAuZmxhZ3NcbiAgICAgICAgICA6IGdldFJlZ0V4cEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKCF+ZmxhZ3MuaW5kZXhPZignZycpKSB0aHJvdyBUeXBlRXJyb3IoJ2AubWF0Y2hBbGxgIGRvZXMgbm90IGFsbG93IG5vbi1nbG9iYWwgcmVnZXhlcycpO1xuICAgICAgfVxuICAgICAgaWYgKFdPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCkgcmV0dXJuIG5hdGl2ZU1hdGNoQWxsLmFwcGx5KE8sIGFyZ3VtZW50cyk7XG4gICAgICBtYXRjaGVyID0gcmVnZXhwW01BVENIX0FMTF07XG4gICAgICBpZiAobWF0Y2hlciA9PT0gdW5kZWZpbmVkICYmIElTX1BVUkUgJiYgY2xhc3NvZihyZWdleHApID09ICdSZWdFeHAnKSBtYXRjaGVyID0gJG1hdGNoQWxsO1xuICAgICAgaWYgKG1hdGNoZXIgIT0gbnVsbCkgcmV0dXJuIGFGdW5jdGlvbihtYXRjaGVyKS5jYWxsKHJlZ2V4cCwgTyk7XG4gICAgfSBlbHNlIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiBuYXRpdmVNYXRjaEFsbC5hcHBseShPLCBhcmd1bWVudHMpO1xuICAgIFMgPSBTdHJpbmcoTyk7XG4gICAgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cCwgJ2cnKTtcbiAgICByZXR1cm4gSVNfUFVSRSA/ICRtYXRjaEFsbC5jYWxsKHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZSwgTUFUQ0hfQUxMLCAkbWF0Y2hBbGwpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9